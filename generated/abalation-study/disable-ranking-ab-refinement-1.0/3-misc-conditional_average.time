2024-09-02 19:46:11 WARNING: Phase 1 examples: ['3', '6', '7']
2024-09-02 19:46:11 INFO: Running in generation mode
2024-09-02 19:46:11 INFO: Repair steps: 0
2024-09-02 19:46:11 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-02 19:46:11 WARNING: Generation initialized with repair_uniform: False
2024-09-02 19:46:11 INFO: Generating proof code
2024-09-02 19:46:11 INFO: Temperature: 1.0
2024-09-02 19:46:11 WARNING: Disabled ranking
2024-09-02 19:46:11 INFO: Direct inference attempt 0
2024-09-02 19:46:21 INFO: Infer time: 9.638075351715088s
2024-09-02 19:46:21 INFO: Checking candidate 0-0
2024-09-02 19:46:21 INFO: 0-0.rs in code pool
2024-09-02 19:46:21 INFO: 0-0.rs is now the best proof candidate
2024-09-02 19:46:21 INFO: Working on merge-0.rs
2024-09-02 19:46:26 INFO: Disabled ranking and the code is not correct.
2024-09-02 19:46:26 INFO: Running houdini on merge-0.rs
2024-09-02 19:46:27 INFO: refining with constantrefine_inference
2024-09-02 19:46:38 INFO: Infer time: 10.899935483932495s
2024-09-02 19:46:38 INFO: 
use vstd::prelude::*;
fn main() {}
verus! {

fn conditional_average(
    vals_1: &Vec<u64>,
    vals_2: &Vec<u64>,
    conds_1: &Vec<bool>,
    conds_2: &Vec<bool>,
    avgs: &mut Vec<u64>,
)
    requires
        vals_1.len() == vals_2.len(),
        vals_1.len() == conds_1.len(),
        vals_1.len() == conds_2.len(),
        forall|idx: int| 0 <= idx < vals_1.len() ==> conds_1[idx] || conds_2[idx],
        forall|idx: int| 0 <= idx < vals_1.len() ==> vals_1[idx] < 1000,
        forall|idx: int| 0 <= idx < vals_2.len() ==> vals_2[idx] < 1000,
    ensures
        avgs.len() == vals_1.len(),
        forall|idx: int|
            0 <= idx < vals_1.len() ==> ((conds_1[idx] && conds_2[idx] ==> avgs[idx] == (vals_1[idx]
                + vals_2[idx]) / 2) && (conds_1[idx] && !conds_2[idx] ==> avgs[idx] == vals_1[idx])
                && (!conds_1[idx] && conds_2[idx] ==> avgs[idx] == vals_2[idx])),
{
    let mut k: usize = 0;
    let common_len = vals_1.len();
    avgs.clear();
    while (k < common_len)
        invariant
            avgs.len() == k,
            forall|idx: int|
                0 <= idx < k ==> ((conds_1[idx] && conds_2[idx] ==> avgs[idx] == (vals_1[idx]
                    + vals_2[idx]) / 2) && (conds_1[idx] && !conds_2[idx] ==> avgs[idx]
                    == vals_1[idx]) && (!conds_1[idx] && conds_2[idx] ==> avgs[idx]
                    == vals_2[idx])),
            forall|idx: int| 0 <= idx < vals_1.len() ==> conds_1[idx] || conds_2[idx],
            forall|idx: int| 0 <= idx < vals_1.len() ==> vals_1[idx] < 1000,
            forall|idx: int| 0 <= idx < vals_2.len() ==> vals_2[idx] < 1000,
            k <= common_len,
            vals_1.len() == conds_1.len(),
            vals_1.len() == conds_2.len(),
            vals_1.len() == vals_2.len(),
    {
        let mut new_avg: u64 = 0;
        if (conds_1[k]) {
            if (conds_2[k]) {
                new_avg = (vals_1[k] + vals_2[k]) / 2;
            } else {
                new_avg = vals_1[k];
            }
        } else {
            new_avg = vals_2[k];
        }
        avgs.push(new_avg);
        k = k + 1;
    }
}

} // verus!

2024-09-02 19:46:43 INFO: Disabled ranking and the code is not correct.
2024-09-02 19:46:43 INFO: refining with arraylen_inference
2024-09-02 19:46:50 INFO: Infer time: 7.158952951431274s
2024-09-02 19:46:50 INFO: Verus has succeeded.
2024-09-02 19:46:50 INFO: 
use vstd::prelude::*;
fn main() {}
verus! {

fn conditional_average(
    vals_1: &Vec<u64>,
    vals_2: &Vec<u64>,
    conds_1: &Vec<bool>,
    conds_2: &Vec<bool>,
    avgs: &mut Vec<u64>,
)
    requires
        vals_1.len() == vals_2.len(),
        vals_1.len() == conds_1.len(),
        vals_1.len() == conds_2.len(),
        forall|idx: int| 0 <= idx < vals_1.len() ==> conds_1[idx] || conds_2[idx],
        forall|idx: int| 0 <= idx < vals_1.len() ==> vals_1[idx] < 1000,
        forall|idx: int| 0 <= idx < vals_2.len() ==> vals_2[idx] < 1000,
    ensures
        avgs.len() == vals_1.len(),
        forall|idx: int|
            0 <= idx < vals_1.len() ==> ((conds_1[idx] && conds_2[idx] ==> avgs[idx] == (vals_1[idx]
                + vals_2[idx]) / 2) && (conds_1[idx] && !conds_2[idx] ==> avgs[idx] == vals_1[idx])
                && (!conds_1[idx] && conds_2[idx] ==> avgs[idx] == vals_2[idx])),
{
    let mut k: usize = 0;
    let common_len = vals_1.len();
    avgs.clear();
    while (k < common_len)
        invariant
            avgs.len() == k,
            vals_1.len() == common_len,
            vals_2.len() == common_len,
            conds_1.len() == common_len,
            conds_2.len() == common_len,
            forall|idx: int|
                0 <= idx < k ==> ((conds_1[idx] && conds_2[idx] ==> avgs[idx] == (vals_1[idx]
                    + vals_2[idx]) / 2) && (conds_1[idx] && !conds_2[idx] ==> avgs[idx]
                    == vals_1[idx]) && (!conds_1[idx] && conds_2[idx] ==> avgs[idx]
                    == vals_2[idx])),
            forall|idx: int| 0 <= idx < vals_1.len() ==> conds_1[idx] || conds_2[idx],
            forall|idx: int| 0 <= idx < vals_1.len() ==> vals_1[idx] < 1000,
            forall|idx: int| 0 <= idx < vals_2.len() ==> vals_2[idx] < 1000,
            k <= common_len,
            vals_1.len() == conds_1.len(),
            vals_1.len() == conds_2.len(),
            vals_1.len() == vals_2.len(),
    {
        let mut new_avg: u64 = 0;
        if (conds_1[k]) {
            if (conds_2[k]) {
                new_avg = (vals_1[k] + vals_2[k]) / 2;
            } else {
                new_avg = vals_1[k];
            }
        } else {
            new_avg = vals_2[k];
        }
        avgs.push(new_avg);
        k = k + 1;
    }
}

} // verus!

2024-09-02 19:46:50 INFO: Verus succeeded with refinement!!
2024-09-02 19:46:50 INFO: finished!
