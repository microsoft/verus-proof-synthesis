2025-03-24 04:19:13 WARNING: Phase 1 examples: ['3', '6', '7']
2025-03-24 04:19:13 INFO: Running in generation mode
2025-03-24 04:19:13 INFO: Repair steps: 10
2025-03-24 04:19:13 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2025-03-24 04:19:13 WARNING: Generation initialized with repair_uniform: False
2025-03-24 04:19:13 INFO: Generating proof code
2025-03-24 04:19:13 INFO: Temperature: 1.0
2025-03-24 04:19:13 INFO: Direct inference attempt 0
2025-03-24 04:20:09 INFO: Infer time: 55.49201941490173s
2025-03-24 04:20:09 INFO: Checking candidate 0-0
2025-03-24 04:20:09 INFO: Verus has succeeded.
2025-03-24 04:20:09 INFO: Verus succeeded!!
2025-03-24 04:20:09 INFO: finished!
Using client 0


use vstd::prelude::*;

fn main() {}

verus! {

fn bit_wise_xor(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)
    requires
        arr1.len() == arr2.len(),
    ensures
        result.len() == arr1.len(),
        forall|i: int|
            0 <= i < result.len() ==> result[i] == #[trigger] arr1[i] ^ #[trigger] arr2[i],
{
    let mut output_arr = Vec::with_capacity(arr1.len());
    let mut index = 0;
    while index < arr1.len()
        invariant
            // The length of the array remains the same
            arr1.len() == arr2.len(),
            // Output array size equals to the number of elements processed
            output_arr.len() == index,
            // Index does not exceed the bounds of the array
            0 <= index <= arr1.len(),
            // Elements in output array are correctly computed
            forall|j: int| 0 <= j < index ==> output_arr[j] == arr1[j] ^ arr2[j],
    {
        output_arr.push((arr1[index] ^ arr2[index]));
        index += 1;
    }
    output_arr
}

} // verus!
