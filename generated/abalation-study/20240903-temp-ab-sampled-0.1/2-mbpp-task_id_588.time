2024-09-03 17:59:17 WARNING: Phase 1 examples: ['3', '6', '7']
2024-09-03 17:59:17 INFO: Running in generation mode
2024-09-03 17:59:17 INFO: Repair steps: 10
2024-09-03 17:59:17 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-03 17:59:17 WARNING: Generation initialized with repair_uniform: False
2024-09-03 17:59:17 INFO: Generating proof code
2024-09-03 17:59:17 INFO: Temperature: 0.1
2024-09-03 17:59:17 INFO: Direct inference attempt 0
2024-09-03 17:59:25 INFO: Infer time: 7.419983863830566s
2024-09-03 17:59:25 INFO: Checking candidate 0-0
2024-09-03 17:59:25 ERROR: Error: 'verified'
2024-09-03 17:59:25 ERROR: Error: 'errors'
2024-09-03 17:59:25 INFO: Checking candidate 0-1
2024-09-03 17:59:26 INFO: 0-1.rs in code pool
2024-09-03 17:59:26 INFO: 0-1.rs is now the best proof candidate
2024-09-03 17:59:26 INFO: Checking candidate 0-2
2024-09-03 17:59:26 INFO: 0-2.rs in code pool
2024-09-03 17:59:26 INFO: 0-2.rs is now the best proof candidate
2024-09-03 17:59:26 INFO: Checking candidate 0-3
2024-09-03 17:59:27 INFO: 0-3.rs in code pool
2024-09-03 17:59:27 INFO: 0-3.rs is now the best proof candidate
2024-09-03 17:59:27 INFO: Checking candidate 0-4
2024-09-03 17:59:27 INFO: 0-4.rs in code pool
2024-09-03 17:59:27 INFO: 0-4.rs is now the best proof candidate
2024-09-03 17:59:27 INFO: Working on merge-0.rs
2024-09-03 17:59:32 INFO: Merged code is better.
2024-09-03 17:59:32 INFO: Running houdini on merge-0.rs
2024-09-03 17:59:33 INFO: Working on merge-1.rs
2024-09-03 17:59:33 INFO: Merged code is better.
2024-09-03 17:59:33 INFO: Running houdini on merge-1.rs
2024-09-03 17:59:35 INFO: Working on merge-2.rs
2024-09-03 17:59:35 INFO: Merged code is better.
2024-09-03 17:59:35 INFO: Running houdini on merge-2.rs
2024-09-03 17:59:36 INFO: Working on merge-3.rs
2024-09-03 17:59:37 INFO: Merged code is better.
2024-09-03 17:59:37 INFO: Running houdini on merge-3.rs
2024-09-03 17:59:38 INFO: refining with constantrefine_inference
2024-09-03 17:59:44 INFO: Infer time: 5.903903484344482s
2024-09-03 17:59:44 INFO: 
#![verifier::loop_isolation(false)]
use vstd::math::*;
use vstd::prelude::*;
fn main() {}
verus! {

spec fn max_rcur(seq: Seq<i32>) -> int
    decreases seq.len(),
{
    if seq.len() <= 1 {
        seq.first() as int
    } else {
        max(seq.last() as int, max_rcur(seq.drop_last()))
    }
}

spec fn min_rcur(seq: Seq<i32>) -> int
    decreases seq.len(),
{
    if seq.len() <= 1 {
        seq.first() as int
    } else {
        min(seq.last() as int, min_rcur(seq.drop_last()))
    }
}

fn difference_max_min(arr: &Vec<i32>) -> (diff: i32)
    requires
        arr.len() > 0,
        forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < # [trigger] arr[i] < i32::MAX / 2,
    ensures
        diff == max_rcur(arr@) - min_rcur(arr@),
{
    let mut min_val = arr[0];
    let mut max_val = arr[0];
    let mut index = 1;
    while index < arr.len()
        invariant
            0 <= index <= arr.len(),
            1 <= arr.len(),
            forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < # [trigger] arr[i] < i32::MAX / 2,
            forall|i: int| 0 <= i < index ==> max_val >= arr[i],
            forall|i: int| 0 <= i < index ==> min_val <= arr[i],
            max_val == max_rcur(arr@.subrange(0, index as int)),
            min_val == min_rcur(arr@.subrange(0, index as int)),
            arr.len() > 0,
            forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < # [trigger] arr[i] < i32::MAX / 2,
    {
        if (arr[index] <= min_val) {
            min_val = arr[index];
        } else if (arr[index] > max_val) {
            max_val = arr[index];
        }
        index += 1;
    }
    max_val - min_val
}

} // verus!

2024-09-03 17:59:50 INFO: New refined code is a good repair
2024-09-03 17:59:50 INFO: 
#![verifier::loop_isolation(false)]
use vstd::math::*;
use vstd::prelude::*;
fn main() {}
verus! {

spec fn max_rcur(seq: Seq<i32>) -> int
    decreases seq.len(),
{
    if seq.len() <= 1 {
        seq.first() as int
    } else {
        max(seq.last() as int, max_rcur(seq.drop_last()))
    }
}

spec fn min_rcur(seq: Seq<i32>) -> int
    decreases seq.len(),
{
    if seq.len() <= 1 {
        seq.first() as int
    } else {
        min(seq.last() as int, min_rcur(seq.drop_last()))
    }
}

fn difference_max_min(arr: &Vec<i32>) -> (diff: i32)
    requires
        arr.len() > 0,
        forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < # [trigger] arr[i] < i32::MAX / 2,
    ensures
        diff == max_rcur(arr@) - min_rcur(arr@),
{
    let mut min_val = arr[0];
    let mut max_val = arr[0];
    let mut index = 1;
    while index < arr.len()
        invariant
            0 <= index <= arr.len(),
            1 <= arr.len(),
            forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < # [trigger] arr[i] < i32::MAX / 2,
            forall|i: int| 0 <= i < index ==> max_val >= arr[i],
            forall|i: int| 0 <= i < index ==> min_val <= arr[i],
            max_val == max_rcur(arr@.subrange(0, index as int)),
            min_val == min_rcur(arr@.subrange(0, index as int)),
            arr.len() > 0,
            forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < # [trigger] arr[i] < i32::MAX / 2,
    {
        if (arr[index] <= min_val) {
            min_val = arr[index];
        } else if (arr[index] > max_val) {
            max_val = arr[index];
        }
        index += 1;
    }
    max_val - min_val
}

} // verus!

2024-09-03 17:59:50 INFO: refining with arraylen_inference
2024-09-03 17:59:58 INFO: Infer time: 8.397755146026611s
2024-09-03 17:59:58 INFO: 
#![verifier::loop_isolation(false)]
use vstd::math::*;
use vstd::prelude::*;
fn main() {}
verus! {

spec fn max_rcur(seq: Seq<i32>) -> int
    decreases seq.len(),
{
    if seq.len() <= 1 {
        seq.first() as int
    } else {
        max(seq.last() as int, max_rcur(seq.drop_last()))
    }
}

spec fn min_rcur(seq: Seq<i32>) -> int
    decreases seq.len(),
{
    if seq.len() <= 1 {
        seq.first() as int
    } else {
        min(seq.last() as int, min_rcur(seq.drop_last()))
    }
}

fn difference_max_min(arr: &Vec<i32>) -> (diff: i32)
    requires
        arr.len() > 0,
        forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < # [trigger] arr[i] < i32::MAX / 2,
    ensures
        diff == max_rcur(arr@) - min_rcur(arr@),
{
    let mut min_val = arr[0];
    let mut max_val = arr[0];
    let mut index = 1;
    while index < arr.len()
        invariant
            0 <= index <= arr.len(),
            1 <= arr.len(),
            forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < # [trigger] arr[i] < i32::MAX / 2,
            forall|i: int| 0 <= i < index ==> max_val >= arr[i],
            forall|i: int| 0 <= i < index ==> min_val <= arr[i],
            max_val == max_rcur(arr@.subrange(0, index as int)),
            min_val == min_rcur(arr@.subrange(0, index as int)),
            arr.len() > 0,
            forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < # [trigger] arr[i] < i32::MAX / 2,
            arr.len() == arr.len(),
    {
        if (arr[index] <= min_val) {
            min_val = arr[index];
        } else if (arr[index] > max_val) {
            max_val = arr[index];
        }
        index += 1;
    }
    max_val - min_val
}

} // verus!

2024-09-03 17:59:59 INFO: New refined code is a good repair
2024-09-03 17:59:59 INFO: 
#![verifier::loop_isolation(false)]
use vstd::math::*;
use vstd::prelude::*;
fn main() {}
verus! {

spec fn max_rcur(seq: Seq<i32>) -> int
    decreases seq.len(),
{
    if seq.len() <= 1 {
        seq.first() as int
    } else {
        max(seq.last() as int, max_rcur(seq.drop_last()))
    }
}

spec fn min_rcur(seq: Seq<i32>) -> int
    decreases seq.len(),
{
    if seq.len() <= 1 {
        seq.first() as int
    } else {
        min(seq.last() as int, min_rcur(seq.drop_last()))
    }
}

fn difference_max_min(arr: &Vec<i32>) -> (diff: i32)
    requires
        arr.len() > 0,
        forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < # [trigger] arr[i] < i32::MAX / 2,
    ensures
        diff == max_rcur(arr@) - min_rcur(arr@),
{
    let mut min_val = arr[0];
    let mut max_val = arr[0];
    let mut index = 1;
    while index < arr.len()
        invariant
            0 <= index <= arr.len(),
            1 <= arr.len(),
            forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < # [trigger] arr[i] < i32::MAX / 2,
            forall|i: int| 0 <= i < index ==> max_val >= arr[i],
            forall|i: int| 0 <= i < index ==> min_val <= arr[i],
            max_val == max_rcur(arr@.subrange(0, index as int)),
            min_val == min_rcur(arr@.subrange(0, index as int)),
            arr.len() > 0,
            forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < # [trigger] arr[i] < i32::MAX / 2,
            arr.len() == arr.len(),
    {
        if (arr[index] <= min_val) {
            min_val = arr[index];
        } else if (arr[index] > max_val) {
            max_val = arr[index];
        }
        index += 1;
    }
    max_val - min_val
}

} // verus!

2024-09-03 17:59:59 INFO: refining with arrayrefine_inference
2024-09-03 18:00:06 INFO: Infer time: 7.035429954528809s
2024-09-03 18:00:06 INFO: 
#![verifier::loop_isolation(false)]
use vstd::math::*;
use vstd::prelude::*;
fn main() {}
verus! {

spec fn max_rcur(seq: Seq<i32>) -> int
    decreases seq.len(),
{
    if seq.len() <= 1 {
        seq.first() as int
    } else {
        max(seq.last() as int, max_rcur(seq.drop_last()))
    }
}

spec fn min_rcur(seq: Seq<i32>) -> int
    decreases seq.len(),
{
    if seq.len() <= 1 {
        seq.first() as int
    } else {
        min(seq.last() as int, min_rcur(seq.drop_last()))
    }
}

fn difference_max_min(arr: &Vec<i32>) -> (diff: i32)
    requires
        arr.len() > 0,
        forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < # [trigger] arr[i] < i32::MAX / 2,
    ensures
        diff == max_rcur(arr@) - min_rcur(arr@),
{
    let mut min_val = arr[0];
    let mut max_val = arr[0];
    let mut index = 1;
    while index < arr.len()
        invariant
            0 <= index <= arr.len(),
            1 <= arr.len(),
            forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < # [trigger] arr[i] < i32::MAX / 2,
            forall|i: int| 0 <= i < index ==> max_val >= arr[i],
            forall|i: int| 0 <= i < index ==> min_val <= arr[i],
            max_val == max_rcur(arr@.subrange(0, index as int)),
            min_val == min_rcur(arr@.subrange(0, index as int)),
            arr.len() > 0,
            forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < # [trigger] arr[i] < i32::MAX / 2,
            arr.len() == arr.len(),
    {
        if (arr[index] <= min_val) {
            min_val = arr[index];
        } else if (arr[index] > max_val) {
            max_val = arr[index];
        }
        index += 1;
    }
    max_val - min_val
}

} // verus!

2024-09-03 18:00:06 INFO: Refinement did not change the code
2024-09-03 18:00:06 INFO: refining with condlooprefine_inference
2024-09-03 18:00:15 INFO: Infer time: 8.724914073944092s
2024-09-03 18:00:15 INFO: 
#![verifier::loop_isolation(false)]
use vstd::math::*;
use vstd::prelude::*;
fn main() {}
verus! {

spec fn max_rcur(seq: Seq<i32>) -> int
    decreases seq.len(),
{
    if seq.len() <= 1 {
        seq.first() as int
    } else {
        max(seq.last() as int, max_rcur(seq.drop_last()))
    }
}

spec fn min_rcur(seq: Seq<i32>) -> int
    decreases seq.len(),
{
    if seq.len() <= 1 {
        seq.first() as int
    } else {
        min(seq.last() as int, min_rcur(seq.drop_last()))
    }
}

fn difference_max_min(arr: &Vec<i32>) -> (diff: i32)
    requires
        arr.len() > 0,
        forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < # [trigger] arr[i] < i32::MAX / 2,
    ensures
        diff == max_rcur(arr@) - min_rcur(arr@),
{
    let mut min_val = arr[0];
    let mut max_val = arr[0];
    let mut index = 1;
    while index < arr.len()
        invariant
            0 <= index <= arr.len(),
            1 <= arr.len(),
            forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < # [trigger] arr[i] < i32::MAX / 2,
            forall|i: int| 0 <= i < index ==> max_val >= arr[i],
            forall|i: int| 0 <= i < index ==> min_val <= arr[i],
            max_val == max_rcur(arr@.subrange(0, index as int)),
            min_val == min_rcur(arr@.subrange(0, index as int)),
            arr.len() > 0,
            forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < # [trigger] arr[i] < i32::MAX / 2,
            arr.len() == arr.len(),
            index > 1 ==> forall|i: int| 0 <= i < index ==> max_val >= arr[i],
            index > 1 ==> forall|i: int| 0 <= i < index ==> min_val <= arr[i],
            index > 1 ==> max_val == max_rcur(arr@.subrange(0, index as int)),
            index > 1 ==> min_val == min_rcur(arr@.subrange(0, index as int)),
    {
        if (arr[index] <= min_val) {
            min_val = arr[index];
        } else if (arr[index] > max_val) {
            max_val = arr[index];
        }
        index += 1;
    }
    max_val - min_val
}

} // verus!

2024-09-03 18:00:16 INFO: New refined code under condloop is not better
2024-09-03 18:00:17 INFO: Step 1: VerusErrorType.ArithmeticFlow with num=3.
2024-09-03 18:00:17 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 1, Verus Errors: 4
2024-09-03 18:00:38 INFO: Infer time: 21.669241905212402s
2024-09-03 18:00:39 INFO: repair-1-0 file generated
2024-09-03 18:00:39 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:00:40 INFO: repair-1-1 file generated
2024-09-03 18:00:40 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:00:41 INFO: repair-1-2 file generated
2024-09-03 18:00:41 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:00:42 INFO: Step 2: VerusErrorType.ArithmeticFlow with num=5.
2024-09-03 18:00:42 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 1, Verus Errors: 4
2024-09-03 18:00:56 INFO: Infer time: 14.357437372207642s
2024-09-03 18:00:56 INFO: repair-2-0 file generated
2024-09-03 18:00:56 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:00:57 ERROR: Error: 'verified'
2024-09-03 18:00:57 ERROR: Error: 'errors'
2024-09-03 18:00:57 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-03 18:00:57 ERROR: Error: 'verified'
2024-09-03 18:00:57 ERROR: Error: 'errors'
2024-09-03 18:00:57 INFO: repair-2-1 file generated
2024-09-03 18:00:57 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-03 18:00:58 ERROR: Error: 'verified'
2024-09-03 18:00:58 ERROR: Error: 'errors'
2024-09-03 18:00:58 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-03 18:00:58 ERROR: Error: 'verified'
2024-09-03 18:00:58 ERROR: Error: 'errors'
2024-09-03 18:00:58 INFO: repair-2-2 file generated
2024-09-03 18:00:58 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-03 18:00:58 ERROR: Error: 'verified'
2024-09-03 18:00:58 ERROR: Error: 'errors'
2024-09-03 18:00:58 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-03 18:00:58 ERROR: Error: 'verified'
2024-09-03 18:00:58 ERROR: Error: 'errors'
2024-09-03 18:00:58 INFO: repair-2-3 file generated
2024-09-03 18:00:58 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-03 18:00:59 INFO: repair-2-4 file generated
2024-09-03 18:00:59 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:01:00 INFO: Step 3: VerusErrorType.ArithmeticFlow with num=5.
2024-09-03 18:01:00 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 1, Verus Errors: 4
2024-09-03 18:01:17 INFO: Infer time: 17.772400617599487s
2024-09-03 18:01:22 INFO: repair-3-0 file generated
2024-09-03 18:01:22 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:01:23 INFO: repair-3-1 file generated
2024-09-03 18:01:23 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:01:24 INFO: repair-3-2 file generated
2024-09-03 18:01:24 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:01:25 INFO: repair-3-3 file generated
2024-09-03 18:01:25 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:01:26 INFO: repair-3-4 file generated
2024-09-03 18:01:26 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:01:27 INFO: Step 4: VerusErrorType.ArithmeticFlow with num=5.
2024-09-03 18:01:27 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 1, Verus Errors: 4
2024-09-03 18:01:42 INFO: Infer time: 14.983953475952148s
2024-09-03 18:01:42 INFO: repair-4-0 file generated
2024-09-03 18:01:42 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:01:43 INFO: repair-4-1 file generated
2024-09-03 18:01:43 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:01:44 INFO: repair-4-2 file generated
2024-09-03 18:01:44 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:01:45 INFO: repair-4-3 file generated
2024-09-03 18:01:45 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:01:46 INFO: repair-4-4 file generated
2024-09-03 18:01:46 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:01:47 INFO: Step 5: VerusErrorType.ArithmeticFlow with num=5.
2024-09-03 18:01:47 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 1, Verus Errors: 4
2024-09-03 18:02:00 INFO: Infer time: 12.479245662689209s
2024-09-03 18:02:00 INFO: repair-5-0 file generated
2024-09-03 18:02:00 INFO: Compilation Error: False, Verified: 2, Errors: 1, Verus Errors: 4
2024-09-03 18:02:01 INFO: repair-5-1 file generated
2024-09-03 18:02:01 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:02:02 INFO: repair-5-2 file generated
2024-09-03 18:02:02 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:02:02 WARNING: The repair is not safe.
2024-09-03 18:02:02 INFO: repair-5-3 file generated
2024-09-03 18:02:02 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:02:03 INFO: repair-5-4 file generated
2024-09-03 18:02:03 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:02:04 INFO: Step 6: VerusErrorType.ArithmeticFlow with num=5.
2024-09-03 18:02:04 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 1, Verus Errors: 4
2024-09-03 18:02:17 INFO: Infer time: 12.335052251815796s
2024-09-03 18:02:17 INFO: repair-6-0 file generated
2024-09-03 18:02:17 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:02:17 WARNING: The repair is not safe.
2024-09-03 18:02:17 ERROR: Error: 'verified'
2024-09-03 18:02:17 ERROR: Error: 'errors'
2024-09-03 18:02:17 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-03 18:02:17 ERROR: Error: 'verified'
2024-09-03 18:02:17 ERROR: Error: 'errors'
2024-09-03 18:02:17 INFO: repair-6-1 file generated
2024-09-03 18:02:17 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-03 18:02:17 WARNING: The repair is not safe.
2024-09-03 18:02:18 INFO: repair-6-2 file generated
2024-09-03 18:02:18 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:02:19 INFO: repair-6-3 file generated
2024-09-03 18:02:19 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 7
2024-09-03 18:02:19 INFO: repair-6-4 file generated
2024-09-03 18:02:19 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:02:20 INFO: Error line deleted. Proof updated to be repair-7-remove-ArithmeticFlow
2024-09-03 18:02:20 INFO: Step 7: VerusErrorType.ArithmeticFlow with num=5.
2024-09-03 18:02:20 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 1, Verus Errors: 4
2024-09-03 18:02:36 INFO: Infer time: 15.308147668838501s
2024-09-03 18:02:36 INFO: Fix failed due to compilation error: VerusErrorType.MismatchedType.
2024-09-03 18:02:36 INFO: repair-7-0 file generated
2024-09-03 18:02:36 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 8
2024-09-03 18:02:38 INFO: repair-7-1 file generated
2024-09-03 18:02:38 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:02:38 INFO: Fix failed due to compilation error: VerusErrorType.MismatchedType.
2024-09-03 18:02:39 ERROR: Error: 'verified'
2024-09-03 18:02:39 ERROR: Error: 'errors'
2024-09-03 18:02:39 INFO: repair-7-2 file generated
2024-09-03 18:02:39 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-03 18:02:39 INFO: repair-7-3 file generated
2024-09-03 18:02:39 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 7
2024-09-03 18:02:40 INFO: repair-7-4 file generated
2024-09-03 18:02:40 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:02:41 INFO: Step 8: VerusErrorType.ArithmeticFlow with num=5.
2024-09-03 18:02:41 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 1, Verus Errors: 4
2024-09-03 18:02:58 INFO: Infer time: 17.028475999832153s
2024-09-03 18:02:58 INFO: repair-8-0 file generated
2024-09-03 18:02:58 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 7
2024-09-03 18:02:59 INFO: repair-8-1 file generated
2024-09-03 18:02:59 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:03:00 INFO: repair-8-2 file generated
2024-09-03 18:03:00 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:03:00 WARNING: The repair is not safe.
2024-09-03 18:03:00 INFO: repair-8-3 file generated
2024-09-03 18:03:00 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:03:01 INFO: repair-8-4 file generated
2024-09-03 18:03:01 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:03:02 INFO: Step 9: VerusErrorType.ArithmeticFlow with num=5.
2024-09-03 18:03:02 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 1, Verus Errors: 4
2024-09-03 18:03:18 INFO: Infer time: 16.426641702651978s
2024-09-03 18:03:19 INFO: repair-9-0 file generated
2024-09-03 18:03:19 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:03:20 INFO: repair-9-1 file generated
2024-09-03 18:03:20 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:03:21 INFO: repair-9-2 file generated
2024-09-03 18:03:21 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 7
2024-09-03 18:03:21 ERROR: Error: 'verified'
2024-09-03 18:03:21 ERROR: Error: 'errors'
2024-09-03 18:03:21 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-03 18:03:21 ERROR: Error: 'verified'
2024-09-03 18:03:21 ERROR: Error: 'errors'
2024-09-03 18:03:22 INFO: repair-9-3 file generated
2024-09-03 18:03:22 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-03 18:03:22 INFO: repair-9-4 file generated
2024-09-03 18:03:22 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:03:23 INFO: Step 10: VerusErrorType.ArithmeticFlow with num=5.
2024-09-03 18:03:23 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 1, Verus Errors: 4
2024-09-03 18:03:37 INFO: Infer time: 14.303548812866211s
2024-09-03 18:03:38 INFO: repair-10-0 file generated
2024-09-03 18:03:38 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 7
2024-09-03 18:03:38 WARNING: The repair is not safe.
2024-09-03 18:03:38 INFO: repair-10-1 file generated
2024-09-03 18:03:38 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 7
2024-09-03 18:03:38 WARNING: The repair is not safe.
2024-09-03 18:03:38 INFO: repair-10-2 file generated
2024-09-03 18:03:38 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:03:39 INFO: repair-10-3 file generated
2024-09-03 18:03:39 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 6
2024-09-03 18:03:40 ERROR: Error: 'verified'
2024-09-03 18:03:40 ERROR: Error: 'errors'
2024-09-03 18:03:40 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-03 18:03:40 ERROR: Error: 'verified'
2024-09-03 18:03:40 ERROR: Error: 'errors'
2024-09-03 18:03:40 INFO: repair-10-4 file generated
2024-09-03 18:03:40 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-03 18:03:41 INFO: Houdini code is better
2024-09-03 18:03:42 INFO: finished!
Start repair
Warning: a non type error is passed to debug_type_error
Warning: a non type error is passed to debug_type_error
Warning: a non type error is passed to debug_type_error
Warning: a non type error is passed to debug_type_error
Warning: a non type error is passed to debug_type_error
Warning: a non type error is passed to debug_type_error
