2024-09-03 22:07:38 WARNING: Phase 1 examples: ['3', '6', '7']
2024-09-03 22:07:38 INFO: Running in generation mode
2024-09-03 22:07:38 INFO: Repair steps: 10
2024-09-03 22:07:38 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-03 22:07:38 WARNING: Generation initialized with repair_uniform: False
2024-09-03 22:07:38 INFO: Generating proof code
2024-09-03 22:07:38 INFO: Temperature: 0.7
2024-09-03 22:07:38 INFO: Direct inference attempt 0
2024-09-03 22:07:48 INFO: Infer time: 10.06880784034729s
2024-09-03 22:07:48 INFO: Checking candidate 0-0
2024-09-03 22:07:48 INFO: Checking candidate 0-1
2024-09-03 22:07:48 ERROR: Error: 'verified'
2024-09-03 22:07:48 ERROR: Error: 'errors'
2024-09-03 22:07:48 INFO: Checking candidate 0-2
2024-09-03 22:07:49 INFO: Checking candidate 0-3
2024-09-03 22:07:49 INFO: Checking candidate 0-4
2024-09-03 22:07:49 INFO: Regenerate...
2024-09-03 22:07:49 INFO: Direct inference attempt 1
2024-09-03 22:07:58 INFO: Infer time: 9.574804306030273s
2024-09-03 22:07:58 INFO: Checking candidate 1-0
2024-09-03 22:07:59 INFO: Checking candidate 1-1
2024-09-03 22:07:59 INFO: Checking candidate 1-2
2024-09-03 22:07:59 INFO: Checking candidate 1-3
2024-09-03 22:07:59 INFO: Checking candidate 1-4
2024-09-03 22:07:59 INFO: Regenerate...
2024-09-03 22:07:59 INFO: Direct inference attempt 2
2024-09-03 22:08:09 INFO: Infer time: 10.246863842010498s
2024-09-03 22:08:09 INFO: Checking candidate 2-0
2024-09-03 22:08:10 INFO: Checking candidate 2-1
2024-09-03 22:08:10 INFO: Checking candidate 2-2
2024-09-03 22:08:10 ERROR: Error: 'verified'
2024-09-03 22:08:10 ERROR: Error: 'errors'
2024-09-03 22:08:10 INFO: Checking candidate 2-3
2024-09-03 22:08:10 INFO: Checking candidate 2-4
2024-09-03 22:08:10 INFO: Regenerate...
2024-09-03 22:08:10 ERROR: No valid code found!
2024-09-03 22:08:15 INFO: refining with constantrefine_inference
2024-09-03 22:08:23 INFO: Infer time: 7.920030117034912s
2024-09-03 22:08:23 INFO: 
use vstd::prelude::*;

fn main() {}

verus! {

fn contains(arr: &Vec<i32>, key: i32) -> (result: bool)
    ensures
        result == (exists|i: int| 0 <= i < arr.len() && (arr[i] == key)),
{
    let mut index = 0;
    while index < arr.len() {
        invariant
            index <= arr.len(),
            key == key;
        if (arr[index] == key) {
            return true;
        }
        index += 1;
    }
    false
}

fn find_dissimilar(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)
    ensures
        forall|i: int|
            0 <= i < arr1.len() ==> (!arr2@.contains(#[trigger] arr1[i]) ==> result@.contains(
                arr1[i],
            )),
        forall|i: int|
            0 <= i < arr2.len() ==> (!arr1@.contains(#[trigger] arr2[i]) ==> result@.contains(
                arr2[i],
            )),
        forall|i: int, j: int|
            0 <= i < j < result.len() ==> #[trigger] result[i] != #[trigger] result[j],
{
    let mut result = Vec::new();
    let mut index = 0;
    while index < arr1.len() {
        invariant
            index <= arr1.len();
        if (!contains(arr2, arr1[index]) && !contains(&result, arr1[index])) {
            result.push(arr1[index]);

        }
        index += 1;
    }
    let mut index = 0;
    while index < arr2.len() {
        invariant
            index <= arr2.len();
        if (!contains(arr1, arr2[index]) && !contains(&result, arr2[index])) {
            result.push(arr2[index]);
        }
        index += 1;
    }
    result
}

} // verus!

2024-09-03 22:08:27 ERROR: Error in comparing code changes: 
2024-09-03 22:08:27 INFO: Unsafe code change
2024-09-03 22:08:27 INFO: Refinement did not change the code
2024-09-03 22:08:27 INFO: refining with arraylen_inference
2024-09-03 22:08:33 INFO: Infer time: 6.3364996910095215s
2024-09-03 22:08:33 INFO: 
use vstd::prelude::*;

fn main() {}

verus! {

fn contains(arr: &Vec<i32>, key: i32) -> (result: bool)
    ensures
        result == (exists|i: int| 0 <= i < arr.len() && (arr[i] == key)),
{
    let mut index = 0;
    while index < arr.len() 
        invariant arr.len() == old(arr.len())
    {
        if (arr[index] == key) {
            return true;
        }
        index += 1;
    }
    false
}

fn find_dissimilar(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)
    ensures
        forall|i: int|
            0 <= i < arr1.len() ==> (!arr2@.contains(#[trigger] arr1[i]) ==> result@.contains(
                arr1[i],
            )),
        forall|i: int|
            0 <= i < arr2.len() ==> (!arr1@.contains(#[trigger] arr2[i]) ==> result@.contains(
                arr2[i],
            )),
        forall|i: int, j: int|
            0 <= i < j < result.len() ==> #[trigger] result[i] != #[trigger] result[j],
{
    let mut result = Vec::new();
    let mut index = 0;
    while index < arr1.len() 
        invariant arr1.len() == old(arr1.len())
        invariant result.len() <= arr1.len() + arr2.len()
    {
        if (!contains(arr2, arr1[index]) && !contains(&result, arr1[index])) {
            result.push(arr1[index]);

        }
        index += 1;
    }
    let mut index = 0;
    while index < arr2.len()
        invariant arr2.len() == old(arr2.len())
        invariant result.len() <= arr1.len() + arr2.len()
    {
        if (!contains(arr1, arr2[index]) && !contains(&result, arr2[index])) {
            result.push(arr2[index]);
        }
        index += 1;
    }
    result
}

} // verus!

2024-09-03 22:08:33 ERROR: Error in comparing code changes: 
2024-09-03 22:08:33 INFO: Unsafe code change
2024-09-03 22:08:33 INFO: Refinement did not change the code
2024-09-03 22:08:33 INFO: refining with arrayrefine_inference
2024-09-03 22:08:43 INFO: Infer time: 9.162296056747437s
2024-09-03 22:08:43 INFO: 
use vstd::prelude::*;

fn main() {}

verus! {

fn contains(arr: &Vec<i32>, key: i32) -> (result: bool)
    ensures
        result == (exists|i: int| 0 <= i < arr.len() && (arr[i] == key)),
{
    let mut index = 0;
    while index < arr.len() {
        if (arr[index] == key) {
            return true;
        }
        index += 1;
    }
    false
}

fn find_dissimilar(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)
    ensures
        forall|i: int|
            0 <= i < arr1.len() ==> (!arr2@.contains(#[trigger] arr1[i]) ==> result@.contains(
                arr1[i],
            )),
        forall|i: int|
            0 <= i < arr2.len() ==> (!arr1@.contains(#[trigger] arr2[i]) ==> result@.contains(
                arr2[i],
            )),
        forall|i: int, j: int|
            0 <= i < j < result.len() ==> #[trigger] result[i] != #[trigger] result[j],
{
    let mut result = Vec::new();
    let mut index = 0;
    while index < arr1.len() {
        if (!contains(arr2, arr1[index]) && !contains(&result, arr1[index])) {
            result.push(arr1[index]);

        }
        index += 1;
    }
    // No arr1.set() in the loop, so ensure invariant covers every element
    ensures
        forall|k: int| 0 <= k < arr1.len() ==> (!contains(arr2, arr1[k]) && !contains(&result, arr1[k]) ==> result.contains(arr1[k]));

    let mut index = 0;
    while index < arr2.len() {
        if (!contains(arr1, arr2[index]) && !contains(&result, arr2[index])) {
            result.push(arr2[index]);
        }
        index += 1;
    }
    // No arr2.set() in the loop, so ensure invariant covers every element
    ensures
        forall|k: int| 0 <= k < arr2.len() ==> (!contains(arr1, arr2[k]) && !contains(&result, arr2[k]) ==> result.contains(arr2[k]));

    result
}

} // verus!

2024-09-03 22:08:43 ERROR: Error in comparing code changes: 
2024-09-03 22:08:43 INFO: Unsafe code change
2024-09-03 22:08:43 INFO: Refinement did not change the code
2024-09-03 22:08:43 INFO: refining with condlooprefine_inference
2024-09-03 22:08:51 INFO: Infer time: 8.243945598602295s
2024-09-03 22:08:51 INFO: 
use vstd::prelude::*;

fn main() {}

verus! {

fn contains(arr: &Vec<i32>, key: i32) -> (result: bool)
    ensures
        result == (exists|i: int| 0 <= i < arr.len() && (arr[i] == key)),
{
    let mut index = 0;
    while index < arr.len() {
        if (arr[index] == key) {
            return true;
        }
        index += 1;
    }
    false
}

fn find_dissimilar(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)
    ensures
        forall|i: int|
            0 <= i < arr1.len() ==> (!arr2@.contains(#[trigger] arr1[i]) ==> result@.contains(
                arr1[i],
            )),
        forall|i: int|
            0 <= i < arr2.len() ==> (!arr1@.contains(#[trigger] arr2[i]) ==> result@.contains(
                arr2[i],
            )),
        forall|i: int, j: int|
            0 <= i < j < result.len() ==> #[trigger] result[i] != #[trigger] result[j],
{
    let mut result = Vec::new();
    let mut index = 0;
    while index < arr1.len()
        invariant
            index <= arr1.len(),
            forall|i: int| 0 <= i < index ==> (!arr2@.contains(#[trigger] arr1[i]) ==> result@.contains(arr1[i])),
            forall|i: int, j: int| 0 <= i < j < result.len() ==> #[trigger] result[i] != #[trigger] result[j],
            index > 0 ==> forall|i: int| 0 <= i < index ==> (!contains(&result, arr1[i])),
    {
        if (!contains(arr2, arr1[index]) && !contains(&result, arr1[index])) {
            result.push(arr1[index]);

        }
        index += 1;
    }
    let mut index = 0;
    while index < arr2.len()
        invariant
            index <= arr2.len(),
            forall|i: int| 0 <= i < index ==> (!arr1@.contains(#[trigger] arr2[i]) ==> result@.contains(arr2[i])),
            forall|i: int, j: int| 0 <= i < j < result.len() ==> #[trigger] result[i] != #[trigger] result[j],
            index > 0 ==> forall|i: int| 0 <= i < index ==> (!contains(&result, arr2[i])),
    {
        if (!contains(arr1, arr2[index]) && !contains(&result, arr2[index])) {
            result.push(arr2[index]);
        }
        index += 1;
    }
    result
}

} // verus!

2024-09-03 22:08:51 ERROR: Error: 'verified'
2024-09-03 22:08:51 ERROR: Error: 'errors'
2024-09-03 22:08:51 INFO: New refined code under condloop is not better
2024-09-03 22:08:51 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-03 22:08:51 WARNING: Generation initialized with repair_uniform: False
2024-09-03 22:08:52 INFO: Step 1: VerusErrorType.PostCondFail with num=3.
2024-09-03 22:08:52 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 2, Verus Errors: 4
2024-09-03 22:09:02 INFO: Infer time: 10.177690029144287s
2024-09-03 22:09:02 INFO: Fix failed due to compilation error: VerusErrorType.MismatchedType.
2024-09-03 22:09:02 ERROR: Error in comparing code changes: 
2024-09-03 22:09:02 INFO: repair-1-0 file generated
2024-09-03 22:09:02 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-03 22:09:02 WARNING: The repair is not safe.
2024-09-03 22:09:02 INFO: repair-1-1 file generated
2024-09-03 22:09:02 INFO: Compilation Error: False, Verified: 2, Errors: 2, Verus Errors: 4
2024-09-03 22:09:03 INFO: Step 1: VerusErrorType.PostCondFail is fixed. Proof updated 1-1.
2024-09-03 22:09:03 INFO: Step 2: VerusErrorType.AssertFail with num=3.
2024-09-03 22:09:03 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 2, Verus Errors: 4
2024-09-03 22:09:03 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-03 22:09:03 WARNING: Generation initialized with repair_uniform: False
2024-09-03 22:09:12 INFO: Infer time: 8.743655920028687s
2024-09-03 22:09:12 INFO: repair-2-0 file generated
2024-09-03 22:09:12 INFO: Compilation Error: False, Verified: 0, Errors: 4, Verus Errors: 4
2024-09-03 22:09:13 INFO: repair-2-1 file generated
2024-09-03 22:09:13 INFO: Compilation Error: False, Verified: 2, Errors: 2, Verus Errors: 4
2024-09-03 22:09:13 INFO: repair-2-2 file generated
2024-09-03 22:09:13 INFO: Compilation Error: False, Verified: 0, Errors: 4, Verus Errors: 6
2024-09-03 22:09:14 INFO: Step 3: VerusErrorType.AssertFail with num=5.
2024-09-03 22:09:14 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 2, Verus Errors: 4
2024-09-03 22:09:14 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-03 22:09:14 WARNING: Generation initialized with repair_uniform: False
2024-09-03 22:09:32 INFO: Infer time: 17.68736743927002s
2024-09-03 22:09:32 INFO: repair-3-0 file generated
2024-09-03 22:09:32 INFO: Compilation Error: False, Verified: 2, Errors: 2, Verus Errors: 3
2024-09-03 22:09:32 INFO: Step 3: VerusErrorType.AssertFail is fixed. Proof updated 3-0.
2024-09-03 22:09:32 INFO: Step 4: VerusErrorType.PostCondFail with num=3.
2024-09-03 22:09:32 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 2, Verus Errors: 3
2024-09-03 22:09:44 INFO: Infer time: 11.340637922286987s
2024-09-03 22:09:44 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-03 22:09:44 ERROR: Error in comparing code changes: 
2024-09-03 22:09:44 INFO: repair-4-0 file generated
2024-09-03 22:09:44 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-03 22:09:44 WARNING: The repair is not safe.
2024-09-03 22:09:44 INFO: repair-4-1 file generated
2024-09-03 22:09:44 INFO: Compilation Error: False, Verified: 2, Errors: 2, Verus Errors: 3
2024-09-03 22:09:44 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-03 22:09:44 ERROR: Error in comparing code changes: 
2024-09-03 22:09:44 INFO: repair-4-2 file generated
2024-09-03 22:09:44 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-03 22:09:44 WARNING: The repair is not safe.
2024-09-03 22:09:45 INFO: Step 5: VerusErrorType.PostCondFail with num=5.
2024-09-03 22:09:45 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 2, Verus Errors: 3
2024-09-03 22:10:00 INFO: Infer time: 15.092831373214722s
2024-09-03 22:10:00 INFO: repair-5-0 file generated
2024-09-03 22:10:00 INFO: Compilation Error: False, Verified: 2, Errors: 2, Verus Errors: 3
2024-09-03 22:10:00 INFO: Step 5: VerusErrorType.PostCondFail is fixed. Proof updated 5-0.
2024-09-03 22:10:00 INFO: Step 6: VerusErrorType.InvFailFront with num=3.
2024-09-03 22:10:00 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 2, Verus Errors: 3
2024-09-03 22:10:08 INFO: Infer time: 7.605981349945068s
2024-09-03 22:10:08 INFO: Here is the quick fix output
2024-09-03 22:10:08 INFO: [repair_invfail_front] Quick fix is not effective. Move on to more general fix attempts.
2024-09-03 22:10:17 INFO: Infer time: 8.956133604049683s
2024-09-03 22:10:18 INFO: repair-6-0 file generated
2024-09-03 22:10:18 INFO: Compilation Error: False, Verified: 2, Errors: 2, Verus Errors: 4
2024-09-03 22:10:18 INFO: repair-6-1 file generated
2024-09-03 22:10:18 INFO: Compilation Error: False, Verified: 2, Errors: 2, Verus Errors: 3
2024-09-03 22:10:18 INFO: Step 6: VerusErrorType.InvFailFront is fixed. Proof updated 6-1.
2024-09-03 22:10:18 INFO: Step 7: VerusErrorType.AssertFail with num=3.
2024-09-03 22:10:18 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 2, Verus Errors: 3
2024-09-03 22:10:18 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-03 22:10:18 WARNING: Generation initialized with repair_uniform: False
2024-09-03 22:10:29 INFO: Infer time: 10.71918272972107s
2024-09-03 22:10:30 INFO: repair-7-0 file generated
2024-09-03 22:10:30 INFO: Compilation Error: False, Verified: 4, Errors: 2, Verus Errors: 3
2024-09-03 22:10:30 INFO: Step 7: VerusErrorType.AssertFail is fixed. Proof updated 7-0.
2024-09-03 22:10:30 INFO: Step 8: VerusErrorType.InvFailFront with num=3.
2024-09-03 22:10:30 INFO: Current score: Compilation Error: False, Verified: 4, Errors: 2, Verus Errors: 3
2024-09-03 22:10:43 INFO: Infer time: 12.484315395355225s
2024-09-03 22:10:43 INFO: Here is the quick fix output
2024-09-03 22:10:43 INFO: [repair_invfail_front] Quick fix is not effective. Move on to more general fix attempts.
2024-09-03 22:11:06 INFO: Infer time: 22.464594841003418s
2024-09-03 22:11:06 INFO: repair-8-0 file generated
2024-09-03 22:11:06 INFO: Compilation Error: False, Verified: 4, Errors: 2, Verus Errors: 3
2024-09-03 22:11:06 INFO: Step 8: VerusErrorType.InvFailFront is fixed. Proof updated 8-0.
2024-09-03 22:11:06 INFO: Step 9: VerusErrorType.AssertFail with num=3.
2024-09-03 22:11:06 INFO: Current score: Compilation Error: False, Verified: 4, Errors: 2, Verus Errors: 3
2024-09-03 22:11:06 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-03 22:11:06 WARNING: Generation initialized with repair_uniform: False
2024-09-03 22:11:21 INFO: Infer time: 14.839146852493286s
2024-09-03 22:11:21 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-03 22:11:21 INFO: repair-9-0 file generated
2024-09-03 22:11:21 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 2
2024-09-03 22:11:22 INFO: Step 10: VerusErrorType.AssertFail with num=5.
2024-09-03 22:11:22 INFO: Current score: Compilation Error: False, Verified: 4, Errors: 2, Verus Errors: 3
2024-09-03 22:11:22 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-03 22:11:22 WARNING: Generation initialized with repair_uniform: False
2024-09-03 22:11:37 INFO: Infer time: 15.454976081848145s
2024-09-03 22:11:37 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-03 22:11:37 INFO: repair-10-0 file generated
2024-09-03 22:11:37 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 2
2024-09-03 22:11:38 ERROR: Error: 'NoneType' object is not subscriptable
2024-09-03 22:11:38 ERROR: Error: 'NoneType' object is not subscriptable
2024-09-03 22:11:38 INFO: Original code is better
2024-09-03 22:11:38 INFO: finished!
Start repair
Warning: a non type error is passed to debug_type_error
Warning: a non type error is passed to debug_type_error

use vstd::prelude::*;

fn main() {}

verus! {

#[verifier::loop_isolation(false)]

fn contains(arr: &Vec<i32>, key: i32) -> (result: bool)
    ensures
        result == (exists|i: int| 0 <= i < arr.len() && (arr[i] == key)),
{
    let mut index = 0;
    while index < arr.len() {
        if (arr[index] == key) {
            return true;
        }
        index += 1;
    }
    false
}

fn find_dissimilar(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)
    ensures
        forall|i: int|
            0 <= i < arr1.len() ==> (!arr2@.contains(#[trigger] arr1[i]) ==> result@.contains(
                arr1[i],
            )),
        forall|i: int|
            0 <= i < arr2.len() ==> (!arr1@.contains(#[trigger] arr2[i]) ==> result@.contains(
                arr2[i],
            )),
        forall|i: int, j: int|
            0 <= i < j < result.len() ==> #[trigger] result[i] != #[trigger] result[j],
{
    let mut result = Vec::new();
    let mut index = 0;
    while index < arr1.len() 
        invariant
            forall|i: int, j: int|
                0 <= i < j < result.len() ==> #[trigger] result[i] != #[trigger] result[j],
    {
        if (!contains(arr2, arr1[index]) && !contains(&result, arr1[index])) {
            result.push(arr1[index]);
        }
        index += 1;
    }
    let mut index = 0;
    while index < arr2.len()
        invariant
            forall|i: int, j: int|
                0 <= i < j < result.len() ==> #[trigger] result[i] != #[trigger] result[j],
            index > 0 ==> forall|i: int|
                0 <= i < arr2.len() ==> (!arr1@.contains(#[trigger] arr2[i]) ==> result@.contains(
                    arr2[i],
                )),
    {
        if (!contains(arr1, arr2[index]) && !contains(&result, arr2[index])) {
            result.push(arr2[index]);
        }
        index += 1;
    }
    result
}

} // verus!


use vstd::prelude::*;

fn main() {}

verus! {
/*
 This lemma is often useful before a vector-remove call, and it can be useful to prove what element is contained in a vector.
 The parameters to this lemma function should match the executable code after it.
 Do NOT pass `old(..)' to this lemma as parameter.
 Example usage:
    proof{
        lemma_vec_remove(vec@, index);
    }
    vec.remove(index); 
 */
proof fn lemma_vec_remove<T>(vec: Seq<T>, i: int)
    requires
        0 <= i < vec.len(),
    ensures
        forall |k: int| 0 <= k < i ==> #[trigger] vec[k] == vec.remove(i)[k],
        forall |k: int| i < k  < vec.len() ==> #[trigger] vec[k] ==  vec.remove(i)[k-1],
{
    
}


/*
 This lemma is often useful before a vector-push call, and it can be useful to prove what element is contained in a vector.
 Example usage:
    proof{
        lemma_vec_push(vec@, value, vec.len());
    }
    vec.push(value); 
 */
proof fn lemma_vec_push<T>(vec: Seq<T>, i: T, l: usize)
    requires
        l == vec.len(),
    ensures
        forall |k: int| 0 <= k < vec.len() ==> #[trigger] vec[k] == vec.push(i)[k],
        vec.push(i).index(l as int) == i,
{
}



#[verifier::loop_isolation(false)]

fn contains(arr: &Vec<i32>, key: i32) -> (result: bool)
    ensures
        result == (exists|i: int| 0 <= i < arr.len() && (arr[i] == key)),
{
    let mut index = 0;
    while index < arr.len() {
        if (arr[index] == key) {
            return true;
        }
        index += 1;
    }
    false
}

fn find_dissimilar(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)
    ensures
        forall|i: int|
            0 <= i < arr1.len() ==> (!arr2@.contains(#[trigger] arr1[i]) ==> result@.contains(
                arr1[i],
            )),
        forall|i: int|
            0 <= i < arr2.len() ==> (!arr1@.contains(#[trigger] arr2[i]) ==> result@.contains(
                arr2[i],
            )),
        forall|i: int, j: int|
            0 <= i < j < result.len() ==> #[trigger] result[i] != #[trigger] result[j],
{
    let mut result = Vec::new();
    let mut index = 0;
    while index < arr1.len() 
        invariant
            forall|i: int, j: int|
                0 <= i < j < result.len() ==> #[trigger] result[i] != #[trigger] result[j],
    {
        if (!contains(arr2, arr1[index]) && !contains(&result, arr1[index])) {
            proof {
                lemma_vec_push(result@, arr1[( index ) as int], result.len());
            }
            result.push(arr1[index]);
        }
        index += 1;
    }

    let mut index = 0;
    while index < arr2.len()
        invariant
            forall|i: int, j: int|
                0 <= i < j < result.len() ==> #[trigger] result[i] != #[trigger] result[j],
            index > 0 ==> forall|i: int|
                0 <= i < arr2.len() ==> (!arr1@.contains(#[trigger] arr2[i]) ==> result@.contains(
                    arr2[i],
                )),
    {
        if (!contains(arr1, arr2[index]) && !contains(&result, arr2[index])) {
            proof {
                lemma_vec_push(result@, arr2[( index ) as int], result.len());
            }
            result.push(arr2[index]);
        }
        index += 1;
    }
    result
}

} // verus!

Warning: a non type error is passed to debug_type_error
Warning: a non type error is passed to debug_type_error
