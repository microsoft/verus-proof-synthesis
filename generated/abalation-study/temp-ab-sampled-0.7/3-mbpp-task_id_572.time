2024-09-03 23:05:09 WARNING: Phase 1 examples: ['3', '6', '7']
2024-09-03 23:05:09 INFO: Running in generation mode
2024-09-03 23:05:09 INFO: Repair steps: 10
2024-09-03 23:05:09 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-03 23:05:09 WARNING: Generation initialized with repair_uniform: False
2024-09-03 23:05:09 INFO: Generating proof code
2024-09-03 23:05:09 INFO: Temperature: 0.7
2024-09-03 23:05:09 INFO: Direct inference attempt 0
2024-09-03 23:05:18 INFO: Infer time: 9.172600269317627s
2024-09-03 23:05:18 INFO: Checking candidate 0-0
2024-09-03 23:05:19 INFO: Checking candidate 0-1
2024-09-03 23:05:19 INFO: 0-1.rs in code pool
2024-09-03 23:05:19 INFO: 0-1.rs is now the best proof candidate
2024-09-03 23:05:19 INFO: Checking candidate 0-2
2024-09-03 23:05:20 INFO: 0-2.rs in code pool
2024-09-03 23:05:20 INFO: 0-2.rs is now the best proof candidate
2024-09-03 23:05:20 INFO: Checking candidate 0-3
2024-09-03 23:05:20 ERROR: Error: 'verified'
2024-09-03 23:05:20 ERROR: Error: 'errors'
2024-09-03 23:05:20 INFO: Checking candidate 0-4
2024-09-03 23:05:20 ERROR: Error: 'verified'
2024-09-03 23:05:20 ERROR: Error: 'errors'
2024-09-03 23:05:20 INFO: Regenerate...
2024-09-03 23:05:20 INFO: Direct inference attempt 1
2024-09-03 23:05:20 INFO: Retrying request to /deployments/gpt-4o/chat/completions in 8.000000 seconds
2024-09-03 23:05:35 INFO: Infer time: 14.365459680557251s
2024-09-03 23:05:35 INFO: Checking candidate 1-0
2024-09-03 23:05:35 ERROR: Error: 'verified'
2024-09-03 23:05:35 ERROR: Error: 'errors'
2024-09-03 23:05:35 INFO: Checking candidate 1-1
2024-09-03 23:05:35 ERROR: Error: 'verified'
2024-09-03 23:05:35 ERROR: Error: 'errors'
2024-09-03 23:05:35 INFO: Checking candidate 1-2
2024-09-03 23:05:36 INFO: 1-2.rs in code pool
2024-09-03 23:05:36 INFO: Checking candidate 1-3
2024-09-03 23:05:36 ERROR: Error: 'verified'
2024-09-03 23:05:36 ERROR: Error: 'errors'
2024-09-03 23:05:36 INFO: Checking candidate 1-4
2024-09-03 23:05:36 ERROR: Error: 'verified'
2024-09-03 23:05:36 ERROR: Error: 'errors'
2024-09-03 23:05:36 INFO: Working on merge-0.rs
2024-09-03 23:05:41 INFO: Running houdini on merge-0.rs
2024-09-03 23:05:41 INFO: Working on merge-1.rs
2024-09-03 23:05:42 INFO: Merged code is better.
2024-09-03 23:05:42 INFO: Running houdini on merge-1.rs
2024-09-03 23:05:43 INFO: Working on merge-2.rs
2024-09-03 23:05:43 INFO: Running houdini on merge-2.rs
2024-09-03 23:05:44 INFO: refining with constantrefine_inference
2024-09-03 23:05:53 INFO: Infer time: 8.846481323242188s
2024-09-03 23:05:53 INFO: 
use vstd::prelude::*;
fn main() {}
verus! {

pub open spec fn count_frequency_rcr(seq: Seq<i32>, key: i32) -> int
    decreases seq.len(),
{
    if seq.len() == 0 {
        0
    } else {
        count_frequency_rcr(seq.drop_last(), key) + if (seq.last() == key) {
            1 as int
        } else {
            0 as int
        }
    }
}

fn count_frequency(arr: &Vec<i32>, key: i32) -> (frequency: usize)
    ensures
        count_frequency_rcr(arr@, key) == frequency,
{
    let mut index = 0;
    let mut counter = 0;
    while index < arr.len()
        invariant
            count_frequency_rcr(arr@.subrange(0, index as int), key) == counter,
            counter >= 0,
            index <= arr.len(),
            index < arr.len(), // Added invariant based on pre-condition
    {
        if (arr[index] == key) {
            counter += 1;
        }
        index += 1;
    }
    counter
}

fn remove_duplicates(arr: &Vec<i32>) -> (unique_arr: Vec<i32>)
    ensures
        unique_arr@ == arr@.filter(|x: i32| count_frequency_rcr(arr@, x) == 1),
{
    let mut unique_arr: Vec<i32> = Vec::new();
    let input_len = arr.len();
    let mut index = 0;
    while index < arr.len()
        invariant
            forall|i: int| 0 <= i < index ==> (arr[i] == arr@.index(i)),
            forall|i: int|
                0 <= i < unique_arr.len() ==> count_frequency_rcr(arr@, unique_arr[i]) == 1,
            index <= arr.len(),
            unique_arr.len() <= index,
            index < arr.len(), // Added invariant based on pre-condition
    {
        if count_frequency(&arr, arr[index]) == 1 {
            unique_arr.push(arr[index]);
        }
        index += 1;
    }
    unique_arr
}

} // verus!

2024-09-03 23:05:58 INFO: New refined code is worse
2024-09-03 23:05:58 INFO: refining with arraylen_inference
2024-09-03 23:06:06 INFO: Infer time: 7.569660186767578s
2024-09-03 23:06:06 INFO: 
use vstd::prelude::*;
fn main() {}
verus! {

pub open spec fn count_frequency_rcr(seq: Seq<i32>, key: i32) -> int
    decreases seq.len(),
{
    if seq.len() == 0 {
        0
    } else {
        count_frequency_rcr(seq.drop_last(), key) + if (seq.last() == key) {
            1 as int
        } else {
            0 as int
        }
    }
}

fn count_frequency(arr: &Vec<i32>, key: i32) -> (frequency: usize)
    ensures
        count_frequency_rcr(arr@, key) == frequency,
{
    let mut index = 0;
    let mut counter = 0;
    while index < arr.len()
        invariant
            count_frequency_rcr(arr@.subrange(0, index as int), key) == counter,
            counter >= 0,
            index <= arr.len(),
            arr.len() == arr.len(),
    {
        if (arr[index] == key) {
            counter += 1;
        }
        index += 1;
    }
    counter
}

fn remove_duplicates(arr: &Vec<i32>) -> (unique_arr: Vec<i32>)
    ensures
        unique_arr@ == arr@.filter(|x: i32| count_frequency_rcr(arr@, x) == 1),
{
    let mut unique_arr: Vec<i32> = Vec::new();
    let input_len = arr.len();
    let mut index = 0;
    while index < arr.len()
        invariant
            forall|i: int| 0 <= i < index ==> (arr[i] == arr@.index(i)),
            forall|i: int|
                0 <= i < unique_arr.len() ==> count_frequency_rcr(arr@, unique_arr[i]) == 1,
            index <= arr.len(),
            unique_arr.len() <= index,
            arr.len() == arr.len(),
            unique_arr.len() == unique_arr.len(),
    {
        if count_frequency(&arr, arr[index]) == 1 {
            unique_arr.push(arr[index]);
        }
        index += 1;
    }
    unique_arr
}

} // verus!

2024-09-03 23:06:06 INFO: New refined code is a good repair
2024-09-03 23:06:06 INFO: 
use vstd::prelude::*;
fn main() {}
verus! {

pub open spec fn count_frequency_rcr(seq: Seq<i32>, key: i32) -> int
    decreases seq.len(),
{
    if seq.len() == 0 {
        0
    } else {
        count_frequency_rcr(seq.drop_last(), key) + if (seq.last() == key) {
            1 as int
        } else {
            0 as int
        }
    }
}

fn count_frequency(arr: &Vec<i32>, key: i32) -> (frequency: usize)
    ensures
        count_frequency_rcr(arr@, key) == frequency,
{
    let mut index = 0;
    let mut counter = 0;
    while index < arr.len()
        invariant
            count_frequency_rcr(arr@.subrange(0, index as int), key) == counter,
            counter >= 0,
            index <= arr.len(),
            arr.len() == arr.len(),
    {
        if (arr[index] == key) {
            counter += 1;
        }
        index += 1;
    }
    counter
}

fn remove_duplicates(arr: &Vec<i32>) -> (unique_arr: Vec<i32>)
    ensures
        unique_arr@ == arr@.filter(|x: i32| count_frequency_rcr(arr@, x) == 1),
{
    let mut unique_arr: Vec<i32> = Vec::new();
    let input_len = arr.len();
    let mut index = 0;
    while index < arr.len()
        invariant
            forall|i: int| 0 <= i < index ==> (arr[i] == arr@.index(i)),
            forall|i: int|
                0 <= i < unique_arr.len() ==> count_frequency_rcr(arr@, unique_arr[i]) == 1,
            index <= arr.len(),
            unique_arr.len() <= index,
            arr.len() == arr.len(),
            unique_arr.len() == unique_arr.len(),
    {
        if count_frequency(&arr, arr[index]) == 1 {
            unique_arr.push(arr[index]);
        }
        index += 1;
    }
    unique_arr
}

} // verus!

2024-09-03 23:06:06 INFO: refining with arrayrefine_inference
2024-09-03 23:06:15 INFO: Infer time: 8.514981031417847s
2024-09-03 23:06:15 INFO: 
use vstd::prelude::*;
fn main() {}
verus! {

pub open spec fn count_frequency_rcr(seq: Seq<i32>, key: i32) -> int
    decreases seq.len(),
{
    if seq.len() == 0 {
        0
    } else {
        count_frequency_rcr(seq.drop_last(), key) + if (seq.last() == key) {
            1 as int
        } else {
            0 as int
        }
    }
}

fn count_frequency(arr: &Vec<i32>, key: i32) -> (frequency: usize)
    ensures
        count_frequency_rcr(arr@, key) == frequency,
{
    let mut index = 0;
    let mut counter = 0;
    while index < arr.len()
        invariant
            count_frequency_rcr(arr@.subrange(0, index as int), key) == counter,
            counter >= 0,
            index <= arr.len(),
            arr.len() == arr.len(), // arr is never modified in the loop
            forall|k: int| 0 <= k < arr.len() ==> arr[k] == arr@[k],
    {
        if (arr[index] == key) {
            counter += 1;
        }
        index += 1;
    }
    counter
}

fn remove_duplicates(arr: &Vec<i32>) -> (unique_arr: Vec<i32>)
    ensures
        unique_arr@ == arr@.filter(|x: i32| count_frequency_rcr(arr@, x) == 1),
{
    let mut unique_arr: Vec<i32> = Vec::new();
    let input_len = arr.len();
    let mut index = 0;
    while index < arr.len()
        invariant
            forall|i: int| 0 <= i < index ==> (arr[i] == arr@.index(i)),
            forall|i: int|
                0 <= i < unique_arr.len() ==> count_frequency_rcr(arr@, unique_arr[i]) == 1,
            index <= arr.len(),
            unique_arr.len() <= index,
            arr.len() == arr.len(), // arr is never modified in the loop
            forall|k: int| 0 <= k < arr.len() ==> arr[k] == arr@[k],
            unique_arr.len() == unique_arr.len(),
    {
        if count_frequency(&arr, arr[index]) == 1 {
            unique_arr.push(arr[index]);
        }
        index += 1;
    }
    unique_arr
}

} // verus!

2024-09-03 23:06:16 INFO: New refined code is a good repair
2024-09-03 23:06:16 INFO: 
use vstd::prelude::*;
fn main() {}
verus! {

pub open spec fn count_frequency_rcr(seq: Seq<i32>, key: i32) -> int
    decreases seq.len(),
{
    if seq.len() == 0 {
        0
    } else {
        count_frequency_rcr(seq.drop_last(), key) + if (seq.last() == key) {
            1 as int
        } else {
            0 as int
        }
    }
}

fn count_frequency(arr: &Vec<i32>, key: i32) -> (frequency: usize)
    ensures
        count_frequency_rcr(arr@, key) == frequency,
{
    let mut index = 0;
    let mut counter = 0;
    while index < arr.len()
        invariant
            count_frequency_rcr(arr@.subrange(0, index as int), key) == counter,
            counter >= 0,
            index <= arr.len(),
            arr.len() == arr.len(), // arr is never modified in the loop
            forall|k: int| 0 <= k < arr.len() ==> arr[k] == arr@[k],
    {
        if (arr[index] == key) {
            counter += 1;
        }
        index += 1;
    }
    counter
}

fn remove_duplicates(arr: &Vec<i32>) -> (unique_arr: Vec<i32>)
    ensures
        unique_arr@ == arr@.filter(|x: i32| count_frequency_rcr(arr@, x) == 1),
{
    let mut unique_arr: Vec<i32> = Vec::new();
    let input_len = arr.len();
    let mut index = 0;
    while index < arr.len()
        invariant
            forall|i: int| 0 <= i < index ==> (arr[i] == arr@.index(i)),
            forall|i: int|
                0 <= i < unique_arr.len() ==> count_frequency_rcr(arr@, unique_arr[i]) == 1,
            index <= arr.len(),
            unique_arr.len() <= index,
            arr.len() == arr.len(), // arr is never modified in the loop
            forall|k: int| 0 <= k < arr.len() ==> arr[k] == arr@[k],
            unique_arr.len() == unique_arr.len(),
    {
        if count_frequency(&arr, arr[index]) == 1 {
            unique_arr.push(arr[index]);
        }
        index += 1;
    }
    unique_arr
}

} // verus!

2024-09-03 23:06:16 INFO: refining with condlooprefine_inference
2024-09-03 23:06:24 INFO: Infer time: 8.376419067382812s
2024-09-03 23:06:24 INFO: 
use vstd::prelude::*;
fn main() {}
verus! {

pub open spec fn count_frequency_rcr(seq: Seq<i32>, key: i32) -> int
    decreases seq.len(),
{
    if seq.len() == 0 {
        0
    } else {
        count_frequency_rcr(seq.drop_last(), key) + if (seq.last() == key) {
            1 as int
        } else {
            0 as int
        }
    }
}

fn count_frequency(arr: &Vec<i32>, key: i32) -> (frequency: usize)
    ensures
        count_frequency_rcr(arr@, key) == frequency,
{
    let mut index = 0;
    let mut counter = 0;
    while index < arr.len()
        invariant
            count_frequency_rcr(arr@.subrange(0, index as int), key) == counter,
            counter >= 0,
            index <= arr.len(),
            index > 0 ==> arr.len() == arr.len(), // arr is never modified in the loop
            index > 0 ==> forall|k: int| 0 <= k < arr.len() ==> arr[k] == arr@[k],
    {
        if (arr[index] == key) {
            counter += 1;
        }
        index += 1;
    }
    counter
}

fn remove_duplicates(arr: &Vec<i32>) -> (unique_arr: Vec<i32>)
    ensures
        unique_arr@ == arr@.filter(|x: i32| count_frequency_rcr(arr@, x) == 1),
{
    let mut unique_arr: Vec<i32> = Vec::new();
    let input_len = arr.len();
    let mut index = 0;
    while index < arr.len()
        invariant
            forall|i: int| 0 <= i < index ==> (arr[i] == arr@.index(i)),
            index > 0 ==> forall|i: int| 0 <= i < unique_arr.len() ==> count_frequency_rcr(arr@, unique_arr[i]) == 1,
            index <= arr.len(),
            unique_arr.len() <= index,
            index > 0 ==> arr.len() == arr.len(), // arr is never modified in the loop
            index > 0 ==> forall|k: int| 0 <= k < arr.len() ==> arr[k] == arr@[k],
            unique_arr.len() == unique_arr.len(),
    {
        if count_frequency(&arr, arr[index]) == 1 {
            unique_arr.push(arr[index]);
        }
        index += 1;
    }
    unique_arr
}

} // verus!

2024-09-03 23:06:25 INFO: New refined code under condloop is not better
2024-09-03 23:06:25 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-03 23:06:25 WARNING: Generation initialized with repair_uniform: False
2024-09-03 23:06:25 INFO: Step 1: VerusErrorType.ArithmeticFlow with num=3.
2024-09-03 23:06:25 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 4
2024-09-03 23:06:37 INFO: Infer time: 11.360982418060303s
2024-09-03 23:06:37 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-03 23:06:37 INFO: repair-1-0 file generated
2024-09-03 23:06:37 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-03 23:06:37 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-03 23:06:37 ERROR: Error in comparing code changes: 
2024-09-03 23:06:37 INFO: repair-1-1 file generated
2024-09-03 23:06:37 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-03 23:06:37 WARNING: The repair is not safe.
2024-09-03 23:06:37 INFO: repair-1-2 file generated
2024-09-03 23:06:37 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 4
2024-09-03 23:06:38 INFO: Step 1: VerusErrorType.ArithmeticFlow is fixed. Proof updated 1-2.
2024-09-03 23:06:38 INFO: Step 2: VerusErrorType.PostCondFail with num=3.
2024-09-03 23:06:38 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 4
2024-09-03 23:06:47 INFO: Infer time: 9.150183200836182s
2024-09-03 23:06:48 INFO: repair-2-0 file generated
2024-09-03 23:06:48 INFO: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 4
2024-09-03 23:06:48 INFO: Step 2: VerusErrorType.PostCondFail is fixed. Proof updated 2-0.
2024-09-03 23:06:48 INFO: Step 3: VerusErrorType.AssertFail with num=3.
2024-09-03 23:06:48 INFO: Current score: Compilation Error: False, Verified: 2, Errors: 3, Verus Errors: 4
2024-09-03 23:06:48 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-03 23:06:48 WARNING: Generation initialized with repair_uniform: False
2024-09-03 23:06:58 INFO: Infer time: 9.553041219711304s
2024-09-03 23:07:07 INFO: Infer time: 9.593608140945435s
2024-09-03 23:07:08 INFO: repair-3-0 file generated
2024-09-03 23:07:08 INFO: Compilation Error: False, Verified: 3, Errors: 3, Verus Errors: 4
2024-09-03 23:07:08 INFO: Step 3: VerusErrorType.AssertFail is partially fixed. Proof updated 3-0.
2024-09-03 23:07:09 INFO: Step 4: VerusErrorType.AssertFail with num=3.
2024-09-03 23:07:09 INFO: Current score: Compilation Error: False, Verified: 3, Errors: 3, Verus Errors: 4
2024-09-03 23:07:09 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-03 23:07:09 WARNING: Generation initialized with repair_uniform: False
2024-09-03 23:07:26 INFO: Infer time: 17.54407811164856s
2024-09-03 23:07:38 INFO: Infer time: 11.764443397521973s
2024-09-03 23:07:38 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-03 23:07:39 INFO: repair-4-0 file generated
2024-09-03 23:07:39 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-03 23:07:39 WARNING: The repair is not safe.
2024-09-03 23:07:39 INFO: Step 5: VerusErrorType.AssertFail with num=5.
2024-09-03 23:07:39 INFO: Current score: Compilation Error: False, Verified: 3, Errors: 3, Verus Errors: 4
2024-09-03 23:07:39 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-03 23:07:39 WARNING: Generation initialized with repair_uniform: False
2024-09-03 23:07:56 INFO: Infer time: 17.430557012557983s
2024-09-03 23:08:09 INFO: Infer time: 12.11211633682251s
2024-09-03 23:08:09 INFO: repair-5-0 file generated
2024-09-03 23:08:09 INFO: Compilation Error: False, Verified: 2, Errors: 4, Verus Errors: 5
2024-09-03 23:08:10 INFO: Step 6: VerusErrorType.AssertFail with num=5.
2024-09-03 23:08:10 INFO: Current score: Compilation Error: False, Verified: 3, Errors: 3, Verus Errors: 4
2024-09-03 23:08:10 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-03 23:08:10 WARNING: Generation initialized with repair_uniform: False
2024-09-03 23:08:25 INFO: Infer time: 15.017362117767334s
2024-09-03 23:08:37 INFO: Infer time: 11.323526382446289s
2024-09-03 23:08:37 INFO: repair-6-0 file generated
2024-09-03 23:08:37 INFO: Compilation Error: False, Verified: 3, Errors: 3, Verus Errors: 4
2024-09-03 23:08:37 INFO: Step 6: VerusErrorType.AssertFail is fixed based on finer-grained check.
2024-09-03 23:08:38 INFO: Step 7: VerusErrorType.AssertFail with num=3.
2024-09-03 23:08:38 INFO: Current score: Compilation Error: False, Verified: 3, Errors: 3, Verus Errors: 4
2024-09-03 23:08:38 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-03 23:08:38 WARNING: Generation initialized with repair_uniform: False
2024-09-03 23:08:51 INFO: Infer time: 13.233833074569702s
2024-09-03 23:09:01 INFO: Infer time: 9.749054670333862s
2024-09-03 23:09:01 INFO: repair-7-0 file generated
2024-09-03 23:09:01 INFO: Compilation Error: False, Verified: 3, Errors: 3, Verus Errors: 4
2024-09-03 23:09:02 INFO: Step 8: VerusErrorType.AssertFail with num=5.
2024-09-03 23:09:02 INFO: Current score: Compilation Error: False, Verified: 3, Errors: 3, Verus Errors: 4
2024-09-03 23:09:02 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-03 23:09:02 WARNING: Generation initialized with repair_uniform: False
2024-09-03 23:09:19 INFO: Infer time: 17.448464393615723s
2024-09-03 23:09:34 INFO: Infer time: 14.537100553512573s
2024-09-03 23:09:35 INFO: repair-8-0 file generated
2024-09-03 23:09:35 INFO: Compilation Error: False, Verified: 3, Errors: 3, Verus Errors: 4
2024-09-03 23:09:35 INFO: Step 8: VerusErrorType.AssertFail is fixed based on finer-grained check.
2024-09-03 23:09:35 INFO: Step 9: VerusErrorType.AssertFail with num=3.
2024-09-03 23:09:35 INFO: Current score: Compilation Error: False, Verified: 3, Errors: 3, Verus Errors: 4
2024-09-03 23:09:35 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-03 23:09:35 WARNING: Generation initialized with repair_uniform: False
2024-09-03 23:09:48 INFO: Infer time: 12.298664808273315s
2024-09-03 23:09:56 INFO: Infer time: 8.57491159439087s
2024-09-03 23:09:57 INFO: repair-9-0 file generated
2024-09-03 23:09:57 INFO: Compilation Error: False, Verified: 3, Errors: 3, Verus Errors: 4
2024-09-03 23:09:58 INFO: Step 10: VerusErrorType.AssertFail with num=5.
2024-09-03 23:09:58 INFO: Current score: Compilation Error: False, Verified: 3, Errors: 3, Verus Errors: 4
2024-09-03 23:09:58 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-03 23:09:58 WARNING: Generation initialized with repair_uniform: False
2024-09-03 23:10:16 INFO: Infer time: 17.95279026031494s
2024-09-03 23:10:25 INFO: Infer time: 8.774140119552612s
2024-09-03 23:10:25 INFO: repair-10-0 file generated
2024-09-03 23:10:25 INFO: Compilation Error: False, Verified: 3, Errors: 3, Verus Errors: 4
2024-09-03 23:10:25 INFO: Step 10: VerusErrorType.AssertFail is fixed based on finer-grained check.
2024-09-03 23:10:26 INFO: Houdini code is better
2024-09-03 23:10:27 INFO: finished!
Start repair
Warning: a non type error is passed to debug_type_error
Warning: a non type error is passed to debug_type_error
special fix: add reveal
special fix: add subrange all
special fix: add reveal
special fix: add subrange all
Warning: a non type error is passed to debug_type_error
special fix: add reveal
special fix: add subrange all
special fix: add reveal
special fix: add subrange all
special fix: add reveal
special fix: add subrange all
special fix: add reveal
special fix: add subrange all
special fix: add reveal
special fix: add subrange all
special fix: add reveal
special fix: add subrange all
