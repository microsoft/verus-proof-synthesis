2024-09-04 15:12:55 WARNING: Phase 1 examples: ['3', '6', '7']
2024-09-04 15:12:55 INFO: Running in generation mode
2024-09-04 15:12:55 INFO: Repair steps: 10
2024-09-04 15:12:55 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-04 15:12:55 WARNING: Generation initialized with repair_uniform: False
2024-09-04 15:12:55 INFO: Generating proof code
2024-09-04 15:12:55 INFO: Temperature: 1.0
2024-09-04 15:12:55 INFO: Direct inference attempt 0
2024-09-04 15:13:00 INFO: Infer time: 4.890366554260254s
2024-09-04 15:13:00 INFO: Checking candidate 0-0
2024-09-04 15:13:01 INFO: 0-0.rs in code pool
2024-09-04 15:13:01 INFO: 0-0.rs is now the best proof candidate
2024-09-04 15:13:01 INFO: Checking candidate 0-1
2024-09-04 15:13:01 INFO: 0-1.rs in code pool
2024-09-04 15:13:01 INFO: 0-1.rs is now the best proof candidate
2024-09-04 15:13:01 INFO: Checking candidate 0-2
2024-09-04 15:13:01 INFO: Checking candidate 0-3
2024-09-04 15:13:01 ERROR: Error: 'verified'
2024-09-04 15:13:01 ERROR: Error: 'errors'
2024-09-04 15:13:02 INFO: Checking candidate 0-4
2024-09-04 15:13:02 ERROR: Error in comparing code changes: 
2024-09-04 15:13:02 INFO: Regenerate...
2024-09-04 15:13:02 INFO: Direct inference attempt 1
2024-09-04 15:13:06 INFO: Infer time: 4.297672510147095s
2024-09-04 15:13:06 INFO: Checking candidate 1-0
2024-09-04 15:13:07 INFO: 1-0.rs in code pool
2024-09-04 15:13:07 INFO: Checking candidate 1-1
2024-09-04 15:13:07 INFO: 1-1.rs in code pool
2024-09-04 15:13:07 INFO: Working on merge-0.rs
2024-09-04 15:13:12 INFO: Running houdini on merge-0.rs
2024-09-04 15:13:13 INFO: Working on merge-1.rs
2024-09-04 15:13:14 INFO: Merged code is better.
2024-09-04 15:13:14 INFO: Running houdini on merge-1.rs
2024-09-04 15:13:15 INFO: Working on merge-2.rs
2024-09-04 15:13:15 INFO: Running houdini on merge-2.rs
2024-09-04 15:13:17 INFO: Working on merge-3.rs
2024-09-04 15:13:17 INFO: Running houdini on merge-3.rs
2024-09-04 15:13:20 INFO: refining with constantrefine_inference
2024-09-04 15:13:20 INFO: Retrying request to /deployments/gpt-35-turbo/chat/completions in 60.000000 seconds
2024-09-04 15:14:23 INFO: Infer time: 63.38490700721741s
2024-09-04 15:14:23 INFO: 
pub fn simple_nested(a: &mut Vec<i32>, b: &Vec<i32>, N: i32) -> (sum: i32)
    requires
        forall|k: int| k <= # [trigger] b[k] <= k + 1,
        old(a).len() == N,
        b.len() == N,
        N <= 0x3FFF_FFFF,
    ensures
        N <= sum <= 2 * N,
{
    let mut i: usize = 0;
    let mut sum: i32 = 0;
    while (i < N as usize)
        invariant
            N <= 0x3FFF_FFFF,
            b.len() == N,
            forall|k: int| k <= # [trigger] b[k] <= k + 1,
            i <= N as usize,
            old(a).len() == N,
            sum <= 2 * N,
            sum >= N,
    {
        a.set(i, b[i] + 1);
        let mut j: usize = 0;
        while (j < i)
            invariant
                j <= i,
                N <= 0x3FFF_FFFF,
                b.len() == N,
                forall|k: int| k <= # [trigger] b[k] <= k + 1,
                i <= N as usize,
                old(a).len() == N,
                sum <= 2 * N,
                sum >= N,
        {
            a.set(i, a[i] - 1);
            j = j + 1;
        }
        sum = sum + a[i];
        i = i + 1;
    }
    sum
}

2024-09-04 15:14:23 INFO: Unsafe code change
2024-09-04 15:14:23 INFO: Refinement did not change the code
2024-09-04 15:14:23 INFO: refining with arraylen_inference
2024-09-04 15:14:24 INFO: Infer time: 0.7151408195495605s
2024-09-04 15:14:24 INFO: 
invariant
    a.len() == N,
    b.len() == N,
    forall|k: int| k <= # [trigger] b[k] <= k + 1,
    i <= N as usize,
    sum <= 2 * N,
    sum >= N,

2024-09-04 15:14:24 ERROR: Error in comparing code changes: 
2024-09-04 15:14:24 INFO: Unsafe code change
2024-09-04 15:14:24 INFO: Refinement did not change the code
2024-09-04 15:14:24 INFO: refining with arrayrefine_inference
2024-09-04 15:14:25 INFO: Infer time: 1.0072319507598877s
2024-09-04 15:14:25 INFO: 
    invariant
        N <= 0x3FFF_FFFF,
        b.len() == N,
        forall|k: int| 0 <= k < a.len() ==> old(a)[k] == a[k],
        forall|k: int| k <= # [trigger] b[k] <= k + 1,
        i <= N as usize,
        old(a).len() == N,
        sum <= 2 * N,
        sum >= N,

2024-09-04 15:14:25 ERROR: Error in comparing code changes: 
2024-09-04 15:14:25 INFO: Unsafe code change
2024-09-04 15:14:25 INFO: Refinement did not change the code
2024-09-04 15:14:25 INFO: refining with condlooprefine_inference
2024-09-04 15:14:29 INFO: Infer time: 4.201746702194214s
2024-09-04 15:14:29 INFO: 
use vstd::prelude::*;
fn main() {}
verus! {

pub fn simple_nested(a: &mut Vec<i32>, b: &Vec<i32>, N: i32) -> (sum: i32)
    requires
        forall|k: int| k <= # [trigger] b[k] <= k + 1,
        old(a).len() == N,
        b.len() == N,
        N <= 0x3FFF_FFFF,
    ensures
        N <= sum <= 2 * N,
{
    let mut i: usize = 0;
    let mut sum: i32 = 0;
    while (i < N as usize)
        invariant
            N <= 0x3FFF_FFFF,
            b.len() == N,
            forall|k: int| k <= # [trigger] b[k] <= k + 1,
            i <= N as usize,
            old(a).len() == N,
            sum <= 2 * N,
            sum >= N,
            i > 0 ==> sum >= i,
    {
        a.set(i, b[i] + 1);
        let mut j: usize = 0;
        while (j < i)
            invariant
                j <= i,
        {
            a.set(i, a[i] - 1);
            j = j + 1;
        }
        sum = sum + a[i];
        i = i + 1;
    }
    sum
}

} // verus!

2024-09-04 15:14:30 INFO: New refined code under condloop is not better
2024-09-04 15:14:30 WARNING: Generation initialized with phase1_examples: ['3', '6', '7']
2024-09-04 15:14:30 WARNING: Generation initialized with repair_uniform: False
2024-09-04 15:14:30 INFO: Step 1: VerusErrorType.PreCondFailVecLen with num=3.
2024-09-04 15:14:30 INFO: Current score: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 5
2024-09-04 15:14:34 INFO: Infer time: 3.6991171836853027s
2024-09-04 15:14:34 INFO: repair-1-0 file generated
2024-09-04 15:14:34 INFO: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 5
2024-09-04 15:14:35 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-04 15:14:35 ERROR: Error in comparing code changes: 
2024-09-04 15:14:35 INFO: repair-1-1 file generated
2024-09-04 15:14:35 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-04 15:14:35 WARNING: The repair is not safe.
2024-09-04 15:14:35 INFO: repair-1-2 file generated
2024-09-04 15:14:35 INFO: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 5
2024-09-04 15:14:36 INFO: Step 2: VerusErrorType.PreCondFailVecLen with num=5.
2024-09-04 15:14:36 INFO: Current score: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 5
2024-09-04 15:14:38 INFO: Infer time: 2.1587533950805664s
2024-09-04 15:14:38 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-04 15:14:38 ERROR: Error in comparing code changes: 
2024-09-04 15:14:38 INFO: repair-2-0 file generated
2024-09-04 15:14:38 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-04 15:14:38 WARNING: The repair is not safe.
2024-09-04 15:14:38 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-04 15:14:38 ERROR: Error in comparing code changes: 
2024-09-04 15:14:38 INFO: repair-2-1 file generated
2024-09-04 15:14:38 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-04 15:14:38 WARNING: The repair is not safe.
2024-09-04 15:14:38 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-04 15:14:38 ERROR: Error in comparing code changes: 
2024-09-04 15:14:38 INFO: repair-2-2 file generated
2024-09-04 15:14:38 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-04 15:14:38 WARNING: The repair is not safe.
2024-09-04 15:14:38 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-04 15:14:39 ERROR: Error in comparing code changes: 
2024-09-04 15:14:39 INFO: repair-2-3 file generated
2024-09-04 15:14:39 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-04 15:14:39 WARNING: The repair is not safe.
2024-09-04 15:14:39 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-04 15:14:39 ERROR: Error in comparing code changes: 
2024-09-04 15:14:39 INFO: repair-2-4 file generated
2024-09-04 15:14:39 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-04 15:14:39 WARNING: The repair is not safe.
2024-09-04 15:14:39 INFO: Step 3: VerusErrorType.PreCondFailVecLen with num=5.
2024-09-04 15:14:39 INFO: Current score: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 5
2024-09-04 15:14:45 INFO: Infer time: 5.715548992156982s
2024-09-04 15:14:45 INFO: repair-3-0 file generated
2024-09-04 15:14:45 INFO: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 5
2024-09-04 15:14:45 INFO: Step 3: VerusErrorType.PreCondFailVecLen is fixed. Proof updated 3-0.
2024-09-04 15:14:45 INFO: Step 4: VerusErrorType.ArithmeticFlow with num=3.
2024-09-04 15:14:45 INFO: Current score: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 5
2024-09-04 15:14:49 INFO: Infer time: 3.4329540729522705s
2024-09-04 15:14:49 INFO: Fix failed due to compilation error: VerusErrorType.MismatchedType.
2024-09-04 15:14:49 ERROR: Error: 'verified'
2024-09-04 15:14:49 ERROR: Error: 'errors'
2024-09-04 15:14:49 INFO: repair-4-0 file generated
2024-09-04 15:14:49 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-04 15:14:49 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-04 15:14:49 INFO: repair-4-1 file generated
2024-09-04 15:14:49 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-04 15:14:50 INFO: Fix failed due to compilation error: VerusErrorType.MismatchedType.
2024-09-04 15:14:50 INFO: repair-4-2 file generated
2024-09-04 15:14:50 INFO: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 5
2024-09-04 15:14:51 INFO: Step 4: VerusErrorType.ArithmeticFlow is fixed. Proof updated 4-2.
2024-09-04 15:14:51 INFO: Step 5: VerusErrorType.ArithmeticFlow with num=3.
2024-09-04 15:14:51 INFO: Current score: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 5
2024-09-04 15:14:56 INFO: Infer time: 5.518510341644287s
2024-09-04 15:14:56 INFO: Fix failed due to compilation error: VerusErrorType.MismatchedType.
2024-09-04 15:14:57 INFO: repair-5-0 file generated
2024-09-04 15:14:57 INFO: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 5
2024-09-04 15:14:58 INFO: Fix failed due to compilation error: VerusErrorType.MismatchedType.
2024-09-04 15:14:58 INFO: repair-5-1 file generated
2024-09-04 15:14:58 INFO: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 5
2024-09-04 15:14:59 INFO: Fix failed due to compilation error: VerusErrorType.MismatchedType.
2024-09-04 15:14:59 INFO: repair-5-2 file generated
2024-09-04 15:14:59 INFO: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 5
2024-09-04 15:15:00 INFO: Step 5: VerusErrorType.ArithmeticFlow is fixed. Proof updated 5-2.
2024-09-04 15:15:00 INFO: Step 6: VerusErrorType.InvFailFront with num=3.
2024-09-04 15:15:00 INFO: Current score: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 5
2024-09-04 15:15:03 INFO: Infer time: 3.0162127017974854s
2024-09-04 15:15:03 INFO: Here is the quick fix output
2024-09-04 15:15:03 ERROR: Error in comparing code changes: 
2024-09-04 15:15:03 INFO: [repair_invfail_front] Quick fix is not safe. Move on to more general fix.
2024-09-04 15:15:08 INFO: Infer time: 5.0839433670043945s
2024-09-04 15:15:09 INFO: repair-6-0 file generated
2024-09-04 15:15:09 INFO: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 4
2024-09-04 15:15:10 INFO: Step 6: VerusErrorType.InvFailFront is fixed. Proof updated 6-0.
2024-09-04 15:15:10 INFO: Step 7: VerusErrorType.InvFailFront with num=3.
2024-09-04 15:15:10 INFO: Current score: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 4
2024-09-04 15:15:10 INFO: Retrying request to /deployments/gpt-35-turbo/chat/completions in 60.000000 seconds
2024-09-04 15:16:11 INFO: Infer time: 61.028895139694214s
2024-09-04 15:16:11 INFO: Here is the quick fix output
2024-09-04 15:16:11 ERROR: Error in comparing code changes: 
2024-09-04 15:16:11 INFO: [repair_invfail_front] Quick fix is not safe. Move on to more general fix.
2024-09-04 15:16:18 INFO: Infer time: 6.963723421096802s
2024-09-04 15:16:18 INFO: repair-7-0 file generated
2024-09-04 15:16:18 INFO: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 4
2024-09-04 15:16:19 ERROR: Error: 'NoneType' object is not subscriptable
2024-09-04 15:16:19 ERROR: Error: 'NoneType' object is not subscriptable
2024-09-04 15:16:19 INFO: Fix failed due to compilation error: VerusErrorType.Other.
2024-09-04 15:16:19 ERROR: Error: 'NoneType' object is not subscriptable
2024-09-04 15:16:19 ERROR: Error: 'NoneType' object is not subscriptable
2024-09-04 15:16:19 ERROR: Error in comparing code changes: warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lib.rs:254:13
    |
254 | #![cfg_attr(doc_cfg, feature(doc_cfg))]
    |             ^^^^^^^
    |
    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lib.rs:428:12
    |
428 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lib.rs:431:12
    |
431 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lib.rs:452:12
    |
452 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "printing"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lib.rs:812:12
    |
812 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lib.rs:884:12
    |
884 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "proc-macro"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lib.rs:904:12
    |
904 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lib.rs:933:12
    |
933 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lib.rs:976:12
    |
976 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "full"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/group.rs:136:12
    |
136 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/group.rs:214:12
    |
214 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/group.rs:269:12
    |
269 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:561:12
    |
561 | #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:569:12
    |
569 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_omit_await_from_token_macro`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:987:11
    |
987 | #[cfg(not(syn_omit_await_from_token_macro))]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_omit_await_from_token_macro)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_omit_await_from_token_macro)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_omit_await_from_token_macro`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:989:7
    |
989 | #[cfg(syn_omit_await_from_token_macro)]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_omit_await_from_token_macro)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_omit_await_from_token_macro)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:394:24
    |
394 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
556 | / define_punctuation_structs! {
557 | |     "_" pub struct Underscore/1 /// `_`
558 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:398:24
    |
398 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
556 | / define_punctuation_structs! {
557 | |     "_" pub struct Underscore/1 /// `_`
558 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:406:24
    |
406 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
556 | / define_punctuation_structs! {
557 | |     "_" pub struct Underscore/1 /// `_`
558 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:414:24
    |
414 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
556 | / define_punctuation_structs! {
557 | |     "_" pub struct Underscore/1 /// `_`
558 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:418:24
    |
418 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
556 | / define_punctuation_structs! {
557 | |     "_" pub struct Underscore/1 /// `_`
558 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:426:24
    |
426 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
556 | / define_punctuation_structs! {
557 | |     "_" pub struct Underscore/1 /// `_`
558 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:271:24
    |
271 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
745 | |     "group"       pub struct BroadcastGroup    /// `group`
746 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:275:24
    |
275 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
745 | |     "group"       pub struct BroadcastGroup    /// `group`
746 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:283:24
    |
283 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
745 | |     "group"       pub struct BroadcastGroup    /// `group`
746 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:291:24
    |
291 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
745 | |     "group"       pub struct BroadcastGroup    /// `group`
746 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:295:24
    |
295 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
745 | |     "group"       pub struct BroadcastGroup    /// `group`
746 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:303:24
    |
303 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
745 | |     "group"       pub struct BroadcastGroup    /// `group`
746 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:309:24
    |
309 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
745 | |     "group"       pub struct BroadcastGroup    /// `group`
746 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:317:24
    |
317 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
745 | |     "group"       pub struct BroadcastGroup    /// `group`
746 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:444:24
    |
444 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                          ^^^^^^^
...
748 | / define_punctuation! {
749 | |     "+"           pub struct Add/1        /// `+`
750 | |     "+="          pub struct AddEq/2      /// `+=`
751 | |     "&"           pub struct And/1        /// `&`
...   |
807 | |     "!~~="        pub struct TildeTildeNe/4 /// `!~~=`
808 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:452:24
    |
452 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                          ^^^^^^^
...
748 | / define_punctuation! {
749 | |     "+"           pub struct Add/1        /// `+`
750 | |     "+="          pub struct AddEq/2      /// `+=`
751 | |     "&"           pub struct And/1        /// `&`
...   |
807 | |     "!~~="        pub struct TildeTildeNe/4 /// `!~~=`
808 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:394:24
    |
394 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
748 | / define_punctuation! {
749 | |     "+"           pub struct Add/1        /// `+`
750 | |     "+="          pub struct AddEq/2      /// `+=`
751 | |     "&"           pub struct And/1        /// `&`
...   |
807 | |     "!~~="        pub struct TildeTildeNe/4 /// `!~~=`
808 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:398:24
    |
398 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
748 | / define_punctuation! {
749 | |     "+"           pub struct Add/1        /// `+`
750 | |     "+="          pub struct AddEq/2      /// `+=`
751 | |     "&"           pub struct And/1        /// `&`
...   |
807 | |     "!~~="        pub struct TildeTildeNe/4 /// `!~~=`
808 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:406:24
    |
406 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
748 | / define_punctuation! {
749 | |     "+"           pub struct Add/1        /// `+`
750 | |     "+="          pub struct AddEq/2      /// `+=`
751 | |     "&"           pub struct And/1        /// `&`
...   |
807 | |     "!~~="        pub struct TildeTildeNe/4 /// `!~~=`
808 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:414:24
    |
414 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
748 | / define_punctuation! {
749 | |     "+"           pub struct Add/1        /// `+`
750 | |     "+="          pub struct AddEq/2      /// `+=`
751 | |     "&"           pub struct And/1        /// `&`
...   |
807 | |     "!~~="        pub struct TildeTildeNe/4 /// `!~~=`
808 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:418:24
    |
418 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
748 | / define_punctuation! {
749 | |     "+"           pub struct Add/1        /// `+`
750 | |     "+="          pub struct AddEq/2      /// `+=`
751 | |     "&"           pub struct And/1        /// `&`
...   |
807 | |     "!~~="        pub struct TildeTildeNe/4 /// `!~~=`
808 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:426:24
    |
426 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
748 | / define_punctuation! {
749 | |     "+"           pub struct Add/1        /// `+`
750 | |     "+="          pub struct AddEq/2      /// `+=`
751 | |     "&"           pub struct And/1        /// `&`
...   |
807 | |     "!~~="        pub struct TildeTildeNe/4 /// `!~~=`
808 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:503:24
    |
503 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
810 | / define_delimiters! {
811 | |     "{"           pub struct Brace        /// `{...}`
812 | |     "["           pub struct Bracket      /// `[...]`
813 | |     "("           pub struct Paren        /// `(...)`
814 | |     " "           pub struct Group        /// None-delimited group
815 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_delimiters` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:507:24
    |
507 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
810 | / define_delimiters! {
811 | |     "{"           pub struct Brace        /// `{...}`
812 | |     "["           pub struct Bracket      /// `[...]`
813 | |     "("           pub struct Paren        /// `(...)`
814 | |     " "           pub struct Group        /// None-delimited group
815 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_delimiters` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:515:24
    |
515 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
810 | / define_delimiters! {
811 | |     "{"           pub struct Brace        /// `{...}`
812 | |     "["           pub struct Bracket      /// `[...]`
813 | |     "("           pub struct Paren        /// `(...)`
814 | |     " "           pub struct Group        /// None-delimited group
815 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_delimiters` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:523:24
    |
523 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
810 | / define_delimiters! {
811 | |     "{"           pub struct Brace        /// `{...}`
812 | |     "["           pub struct Bracket      /// `[...]`
813 | |     "("           pub struct Paren        /// `(...)`
814 | |     " "           pub struct Group        /// None-delimited group
815 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_delimiters` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:527:24
    |
527 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
810 | / define_delimiters! {
811 | |     "{"           pub struct Brace        /// `{...}`
812 | |     "["           pub struct Bracket      /// `[...]`
813 | |     "("           pub struct Paren        /// `(...)`
814 | |     " "           pub struct Group        /// None-delimited group
815 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_delimiters` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/token.rs:535:24
    |
535 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
810 | / define_delimiters! {
811 | |     "{"           pub struct Brace        /// `{...}`
812 | |     "["           pub struct Bracket      /// `[...]`
813 | |     "("           pub struct Paren        /// `(...)`
814 | |     " "           pub struct Group        /// None-delimited group
815 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_delimiters` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ident.rs:38:12
   |
38 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:463:12
    |
463 | #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:148:16
    |
148 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:329:16
    |
329 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:360:16
    |
360 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:336:1
    |
336 | / ast_enum_of_structs! {
337 | |     /// Content of a compile-time structured attribute.
338 | |     ///
339 | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
369 | |     }
370 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:377:16
    |
377 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:390:16
    |
390 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:417:16
    |
417 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:412:1
    |
412 | / ast_enum_of_structs! {
413 | |     /// Element of a compile-time attribute list.
414 | |     ///
415 | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
425 | |     }
426 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:165:16
    |
165 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:213:16
    |
213 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:223:16
    |
223 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:237:16
    |
237 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:251:16
    |
251 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:557:16
    |
557 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:565:16
    |
565 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:573:16
    |
573 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:581:16
    |
581 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:630:16
    |
630 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:644:16
    |
644 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/attr.rs:654:16
    |
654 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:9:16
  |
9 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
  |                ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:36:16
   |
36 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:25:1
    |
25  | / ast_enum_of_structs! {
26  | |     /// Data stored within an enum variant or struct.
27  | |     ///
28  | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
47  | |     }
48  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:56:16
   |
56 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:68:16
   |
68 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:153:16
    |
153 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:187:16
    |
187 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:175:1
    |
175 | / ast_enum_of_structs! {
176 | |     /// The visibility level of an item: inherited or `pub` or
177 | |     /// `pub(restricted)`.
178 | |     ///
...   |
201 | |     }
202 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:209:16
    |
209 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:220:16
    |
220 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:232:16
    |
232 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:248:16
    |
248 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:277:16
    |
277 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:288:16
    |
288 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:331:16
    |
331 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:301:20
    |
301 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:318:20
    |
318 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:431:16
    |
431 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:444:16
    |
444 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:453:16
    |
453 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:462:16
    |
462 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:476:16
    |
476 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:483:16
    |
483 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/data.rs:490:16
    |
490 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:89:16
   |
89 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:90:20
   |
90 |     #[cfg_attr(not(syn_no_non_exhaustive), non_exhaustive)]
   |                    ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:14:1
    |
14  | / ast_enum_of_structs! {
15  | |     /// A Rust expression.
16  | |     ///
17  | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
262 | |     }
263 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:269:16
    |
269 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:281:16
    |
281 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:294:16
    |
294 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:307:16
    |
307 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:320:16
    |
320 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:334:16
    |
334 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:347:16
    |
347 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:359:16
    |
359 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:372:16
    |
372 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:386:16
    |
386 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:400:16
    |
400 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:413:16
    |
413 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:434:16
    |
434 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:447:16
    |
447 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:460:16
    |
460 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:483:16
    |
483 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:499:16
    |
499 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:514:16
    |
514 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:527:16
    |
527 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:542:16
    |
542 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:553:16
    |
553 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:571:16
    |
571 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:582:16
    |
582 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:596:16
    |
596 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:612:16
    |
612 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:628:16
    |
628 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:640:16
    |
640 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:653:16
    |
653 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:667:16
    |
667 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:681:16
    |
681 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:696:16
    |
696 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:711:16
    |
711 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:723:16
    |
723 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:735:16
    |
735 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:747:16
    |
747 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:761:16
    |
761 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:773:16
    |
773 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:785:16
    |
785 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:804:16
    |
804 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:890:16
    |
890 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:960:16
    |
960 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:1008:16
     |
1008 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:1022:16
     |
1022 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:1039:16
     |
1039 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:1061:16
     |
1061 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:1089:16
     |
1089 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:1105:16
     |
1105 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:259:15
    |
259 |         #[cfg(syn_no_non_exhaustive)]
    |               ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_const_vec_new`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:813:40
    |
813 |     #[cfg(all(feature = "parsing", not(syn_no_const_vec_new)))]
    |                                        ^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_const_vec_new)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_const_vec_new)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:878:19
    |
878 |             #[cfg(syn_no_non_exhaustive)]
    |                   ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:1256:16
     |
1256 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2088:16
     |
2088 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2183:16
     |
2183 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2209:16
     |
2209 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2309:16
     |
2309 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2330:16
     |
2330 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2347:16
     |
2347 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2365:16
     |
2365 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2393:16
     |
2393 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2411:16
     |
2411 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2452:16
     |
2452 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2492:16
     |
2492 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2524:16
     |
2524 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2594:16
     |
2594 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2617:16
     |
2617 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2640:16
     |
2640 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2649:16
     |
2649 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2664:16
     |
2664 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2673:16
     |
2673 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2682:16
     |
2682 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2694:16
     |
2694 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2771:16
     |
2771 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2822:16
     |
2822 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2856:16
     |
2856 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2867:16
     |
2867 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2879:16
     |
2879 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2933:16
     |
2933 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2963:16
     |
2963 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3012:16
     |
3012 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3044:16
     |
3044 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3086:16
     |
3086 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3103:16
     |
3103 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3117:16
     |
3117 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3131:16
     |
3131 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3164:16
     |
3164 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2558:28
     |
2558 |                   #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                              ^^^^^^^
...
2575 | /     impl_by_parsing_expr! {
2576 | |         ExprAssign, Assign, "expected assignment expression",
2577 | |         ExprAssignOp, AssignOp, "expected compound assignment expression",
2578 | |         ExprAwait, Await, "expected await expression",
...    |
2590 | |         ExprGetField, GetField, "expected get field expression",
2591 | |     }
     | |_____- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `impl_by_parsing_expr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:1345:20
     |
1345 |         #[cfg_attr(doc_cfg, doc(cfg(all(feature = "full", feature = "parsing"))))]
     |                    ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:2814:23
     |
2814 |                 #[cfg(syn_no_non_exhaustive)]
     |                       ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_const_vec_new`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3199:23
     |
3199 |             #[cfg(not(syn_no_const_vec_new))]
     |                       ^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_const_vec_new)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_const_vec_new)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_const_vec_new`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3201:19
     |
3201 |             #[cfg(syn_no_const_vec_new)]
     |                   ^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_const_vec_new)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_const_vec_new)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3288:16
     |
3288 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3298:16
     |
3298 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3308:16
     |
3308 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3320:16
     |
3320 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3335:16
     |
3335 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3346:16
     |
3346 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3357:16
     |
3357 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3372:16
     |
3372 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3382:16
     |
3382 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3391:16
     |
3391 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3399:16
     |
3399 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3410:16
     |
3410 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3441:16
     |
3441 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3453:16
     |
3453 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3465:16
     |
3465 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3485:16
     |
3485 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3509:16
     |
3509 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3528:16
     |
3528 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3550:16
     |
3550 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3561:16
     |
3561 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3572:16
     |
3572 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3582:16
     |
3582 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3592:16
     |
3592 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3611:16
     |
3611 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3624:16
     |
3624 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3637:16
     |
3637 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3648:16
     |
3648 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3658:16
     |
3658 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3668:16
     |
3668 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3678:16
     |
3678 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3687:16
     |
3687 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3699:16
     |
3699 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3710:16
     |
3710 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3720:16
     |
3720 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3729:16
     |
3729 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3740:16
     |
3740 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3751:16
     |
3751 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3761:16
     |
3761 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3771:16
     |
3771 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3780:16
     |
3780 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3798:16
     |
3798 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3811:16
     |
3811 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3821:16
     |
3821 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3832:16
     |
3832 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3842:16
     |
3842 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3851:16
     |
3851 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/expr.rs:3864:16
     |
3864 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:296:5
    |
296 |     doc_cfg,
    |     ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:307:5
    |
307 |     doc_cfg,
    |     ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:318:5
    |
318 |     doc_cfg,
    |     ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:14:16
   |
14 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:35:16
   |
35 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:23:1
    |
23  | / ast_enum_of_structs! {
24  | |     /// A generic type parameter, lifetime, or const generic: `T: Into<String>`,
25  | |     /// `'a: 'b`, `const LEN: usize`.
26  | |     ///
...   |
45  | |     }
46  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:53:16
   |
53 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:69:16
   |
69 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:83:16
   |
83 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:363:20
    |
363 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
404 | generics_wrapper_impls!(ImplGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:371:20
    |
371 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
404 | generics_wrapper_impls!(ImplGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:382:20
    |
382 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
404 | generics_wrapper_impls!(ImplGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:386:20
    |
386 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
404 | generics_wrapper_impls!(ImplGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:394:20
    |
394 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
404 | generics_wrapper_impls!(ImplGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:363:20
    |
363 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
406 | generics_wrapper_impls!(TypeGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:371:20
    |
371 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
406 | generics_wrapper_impls!(TypeGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:382:20
    |
382 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
406 | generics_wrapper_impls!(TypeGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:386:20
    |
386 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
406 | generics_wrapper_impls!(TypeGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:394:20
    |
394 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
406 | generics_wrapper_impls!(TypeGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:363:20
    |
363 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
408 | generics_wrapper_impls!(Turbofish);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:371:20
    |
371 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
408 | generics_wrapper_impls!(Turbofish);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:382:20
    |
382 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
408 | generics_wrapper_impls!(Turbofish);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:386:20
    |
386 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
408 | generics_wrapper_impls!(Turbofish);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:394:20
    |
394 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
408 | generics_wrapper_impls!(Turbofish);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:426:16
    |
426 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:475:16
    |
475 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:470:1
    |
470 | / ast_enum_of_structs! {
471 | |     /// A trait or lifetime used as a bound on a type parameter.
472 | |     ///
473 | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
479 | |     }
480 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:487:16
    |
487 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:504:16
    |
504 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:517:16
    |
517 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:535:16
    |
535 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:524:1
    |
524 | / ast_enum_of_structs! {
525 | |     /// A single predicate in a `where` clause: `T: Deserialize<'de>`.
526 | |     ///
527 | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
545 | |     }
546 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:553:16
    |
553 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:570:16
    |
570 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:583:16
    |
583 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:347:9
    |
347 |         doc_cfg,
    |         ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:597:16
    |
597 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:660:16
    |
660 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:687:16
    |
687 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:725:16
    |
725 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:747:16
    |
747 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:758:16
    |
758 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:812:16
    |
812 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:831:16
    |
831 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:880:16
    |
880 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:891:16
    |
891 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:915:16
    |
915 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:950:16
    |
950 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:961:16
    |
961 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:1036:16
     |
1036 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:1186:16
     |
1186 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:1196:16
     |
1196 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:1208:16
     |
1208 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:1247:16
     |
1247 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:1279:16
     |
1279 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:1289:16
     |
1289 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:1304:16
     |
1304 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:1314:16
     |
1314 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:1324:16
     |
1324 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/generics.rs:1333:16
     |
1333 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:22:16
   |
22 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:23:20
   |
23 |     #[cfg_attr(not(syn_no_non_exhaustive), non_exhaustive)]
   |                    ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:12:1
    |
12  | / ast_enum_of_structs! {
13  | |     /// Things that can appear directly inside of a module or scope.
14  | |     ///
15  | |     /// *This type is available only if Syn is built with the `"full"` feature.*
...   |
109 | |     }
110 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:116:16
    |
116 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:138:16
    |
138 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:155:16
    |
155 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:172:16
    |
172 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:186:16
    |
186 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:200:16
    |
200 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:220:16
    |
220 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:234:16
    |
234 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:248:16
    |
248 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:263:16
    |
263 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:286:16
    |
286 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:303:16
    |
303 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:323:16
    |
323 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:340:16
    |
340 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:357:16
    |
357 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:372:16
    |
372 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:509:16
    |
509 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:499:1
    |
499 | / ast_enum_of_structs! {
500 | |     /// A suffix of an import tree in a `use` item: `Type as Renamed` or `*`.
501 | |     ///
502 | |     /// *This type is available only if Syn is built with the `"full"` feature.*
...   |
525 | |     }
526 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:532:16
    |
532 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:544:16
    |
544 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:554:16
    |
554 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:566:16
    |
566 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:576:16
    |
576 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:593:16
    |
593 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:594:20
    |
594 |     #[cfg_attr(not(syn_no_non_exhaustive), non_exhaustive)]
    |                    ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:583:1
    |
583 | / ast_enum_of_structs! {
584 | |     /// An item within an `extern` block.
585 | |     ///
586 | |     /// *This type is available only if Syn is built with the `"full"` feature.*
...   |
632 | |     }
633 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:639:16
    |
639 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:652:16
    |
652 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:669:16
    |
669 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:683:16
    |
683 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:701:16
    |
701 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:702:20
    |
702 |     #[cfg_attr(not(syn_no_non_exhaustive), non_exhaustive)]
    |                    ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:691:1
    |
691 | / ast_enum_of_structs! {
692 | |     /// An item declaration within the definition of a trait.
693 | |     ///
694 | |     /// *This type is available only if Syn is built with the `"full"` feature.*
...   |
740 | |     }
741 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:747:16
    |
747 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:765:16
    |
765 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:778:16
    |
778 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:795:16
    |
795 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:813:16
    |
813 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:814:20
    |
814 |     #[cfg_attr(not(syn_no_non_exhaustive), non_exhaustive)]
    |                    ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:803:1
    |
803 | / ast_enum_of_structs! {
804 | |     /// An item within an impl block.
805 | |     ///
806 | |     /// *This type is available only if Syn is built with the `"full"` feature.*
...   |
855 | |     }
856 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:862:16
    |
862 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:883:16
    |
883 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:898:16
    |
898 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:916:16
    |
916 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:929:16
    |
929 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:984:16
    |
984 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:995:16
    |
995 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
     |
155  |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                      ^^^^^^^
     |
    ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:991:1
     |
991  | / ast_enum_of_structs! {
992  | |     /// An argument in a function signature: the `n: usize` in `fn f(n: usize)`.
993  | |     ///
994  | |     /// *This type is available only if Syn is built with the `"full"` feature.*
...    |
1006 | |     }
1007 | | }
     | |_- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:1017:16
     |
1017 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:106:15
    |
106 |         #[cfg(syn_no_non_exhaustive)]
    |               ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:408:19
    |
408 |             #[cfg(syn_no_non_exhaustive)]
    |                   ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:629:15
    |
629 |         #[cfg(syn_no_non_exhaustive)]
    |               ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:737:15
    |
737 |         #[cfg(syn_no_non_exhaustive)]
    |               ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:852:15
    |
852 |         #[cfg(syn_no_non_exhaustive)]
    |               ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:1044:16
     |
1044 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:1363:16
     |
1363 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:1390:16
     |
1390 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:1431:16
     |
1431 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:1464:16
     |
1464 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:1478:16
     |
1478 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:1527:16
     |
1527 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:1578:16
     |
1578 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:1693:16
     |
1693 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:1754:16
     |
1754 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:1790:16
     |
1790 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:1817:16
     |
1817 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:1916:16
     |
1916 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:1958:16
     |
1958 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:1981:16
     |
1981 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2063:16
     |
2063 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2079:16
     |
2079 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2095:16
     |
2095 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2139:16
     |
2139 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2157:16
     |
2157 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2207:16
     |
2207 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2233:16
     |
2233 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2259:16
     |
2259 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2316:16
     |
2316 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2390:16
     |
2390 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2446:16
     |
2446 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2506:16
     |
2506 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2538:16
     |
2538 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2567:16
     |
2567 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2640:16
     |
2640 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2658:16
     |
2658 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2770:16
     |
2770 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2864:16
     |
2864 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2891:16
     |
2891 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2931:16
     |
2931 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2989:16
     |
2989 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2053:23
     |
2053 |                 #[cfg(syn_no_non_exhaustive)]
     |                       ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2497:23
     |
2497 |                 #[cfg(syn_no_non_exhaustive)]
     |                       ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:2853:27
     |
2853 |                     #[cfg(syn_no_non_exhaustive)]
     |                           ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3035:16
     |
3035 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3051:16
     |
3051 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3063:16
     |
3063 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3083:16
     |
3083 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3102:16
     |
3102 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3119:16
     |
3119 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3137:16
     |
3137 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3149:16
     |
3149 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3164:16
     |
3164 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3180:16
     |
3180 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3207:16
     |
3207 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3220:16
     |
3220 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3242:16
     |
3242 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3257:16
     |
3257 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3279:16
     |
3279 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3301:16
     |
3301 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3312:16
     |
3312 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3321:16
     |
3321 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3328:16
     |
3328 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3337:16
     |
3337 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3344:16
     |
3344 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3353:16
     |
3353 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3371:16
     |
3371 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3390:16
     |
3390 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3410:16
     |
3410 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3419:16
     |
3419 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3437:16
     |
3437 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3455:16
     |
3455 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3471:16
     |
3471 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3480:16
     |
3480 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3490:16
     |
3490 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3504:16
     |
3504 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3515:16
     |
3515 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3553:16
     |
3553 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/item.rs:3594:16
     |
3594 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/file.rs:80:16
   |
80 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/file.rs:93:16
   |
93 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/file.rs:118:16
    |
118 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lifetime.rs:127:16
    |
127 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lifetime.rs:145:16
    |
145 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:629:12
    |
629 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:640:12
    |
640 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:652:12
    |
652 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:14:1
    |
14  | / ast_enum_of_structs! {
15  | |     /// A Rust literal such as a string or integer or boolean.
16  | |     ///
17  | |     /// # Syntax tree enum
...   |
48  | |     }
49  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:666:20
    |
666 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
703 | lit_extra_traits!(LitStr);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:676:20
    |
676 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
703 | lit_extra_traits!(LitStr);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:684:20
    |
684 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
703 | lit_extra_traits!(LitStr);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:666:20
    |
666 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
704 | lit_extra_traits!(LitByteStr);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:676:20
    |
676 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
704 | lit_extra_traits!(LitByteStr);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:684:20
    |
684 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
704 | lit_extra_traits!(LitByteStr);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:666:20
    |
666 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
705 | lit_extra_traits!(LitByte);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:676:20
    |
676 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
705 | lit_extra_traits!(LitByte);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:684:20
    |
684 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
705 | lit_extra_traits!(LitByte);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:666:20
    |
666 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
706 | lit_extra_traits!(LitChar);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:676:20
    |
676 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
706 | lit_extra_traits!(LitChar);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:684:20
    |
684 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
706 | lit_extra_traits!(LitChar);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:666:20
    |
666 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
707 | lit_extra_traits!(LitInt);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:676:20
    |
676 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
707 | lit_extra_traits!(LitInt);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:684:20
    |
684 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
707 | lit_extra_traits!(LitInt);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:666:20
    |
666 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
708 | lit_extra_traits!(LitFloat);
    | --------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:676:20
    |
676 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
708 | lit_extra_traits!(LitFloat);
    | --------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:684:20
    |
684 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
708 | lit_extra_traits!(LitFloat);
    | --------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:170:16
    |
170 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:200:16
    |
200 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:557:16
    |
557 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:567:16
    |
567 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:577:16
    |
577 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:587:16
    |
587 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:597:16
    |
597 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:607:16
    |
607 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:617:16
    |
617 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:744:16
    |
744 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:816:16
    |
816 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:827:16
    |
827 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:838:16
    |
838 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:849:16
    |
849 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:860:16
    |
860 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:871:16
    |
871 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:882:16
    |
882 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:900:16
    |
900 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:907:16
    |
907 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:914:16
    |
914 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:921:16
    |
921 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:928:16
    |
928 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:935:16
    |
935 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:942:16
    |
942 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_negative_literal_parse`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lit.rs:1569:15
     |
1569 |         #[cfg(syn_no_negative_literal_parse)]
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_negative_literal_parse)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_negative_literal_parse)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/mac.rs:15:16
   |
15 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/mac.rs:29:16
   |
29 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/mac.rs:137:16
    |
137 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/mac.rs:145:16
    |
145 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/mac.rs:177:16
    |
177 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/mac.rs:201:16
    |
201 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/derive.rs:8:16
  |
8 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
  |                ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/derive.rs:39:16
   |
39 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/derive.rs:59:16
   |
59 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/derive.rs:72:16
   |
72 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/derive.rs:85:16
   |
85 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/derive.rs:97:16
   |
97 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/derive.rs:237:16
    |
237 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/op.rs:6:16
  |
6 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
  |                ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/op.rs:83:16
   |
83 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/op.rs:165:16
    |
165 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/op.rs:200:16
    |
200 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/op.rs:231:16
    |
231 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/op.rs:278:16
    |
278 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/stmt.rs:7:16
  |
7 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
  |                ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/stmt.rs:19:16
   |
19 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/stmt.rs:39:16
   |
39 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/stmt.rs:138:16
    |
138 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/stmt.rs:149:16
    |
149 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/stmt.rs:111:20
    |
111 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/stmt.rs:319:16
    |
319 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/stmt.rs:328:16
    |
328 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/stmt.rs:343:16
    |
343 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:18:16
   |
18 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:19:20
   |
19 |     #[cfg_attr(not(syn_no_non_exhaustive), non_exhaustive)]
   |                    ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:7:1
    |
7   | / ast_enum_of_structs! {
8   | |     /// The possible types that a Rust value could have.
9   | |     ///
10  | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
93  | |     }
94  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:101:16
    |
101 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:115:16
    |
115 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:133:16
    |
133 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:146:16
    |
146 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:158:16
    |
158 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:169:16
    |
169 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:180:16
    |
180 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:191:16
    |
191 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:204:16
    |
204 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:216:16
    |
216 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:230:16
    |
230 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:244:16
    |
244 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:257:16
    |
257 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:269:16
    |
269 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:281:16
    |
281 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:293:16
    |
293 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:316:16
    |
316 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:328:16
    |
328 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:90:15
   |
90 |         #[cfg(syn_no_non_exhaustive)]
   |               ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:347:16
    |
347 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:656:16
    |
656 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:667:16
    |
667 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:680:16
    |
680 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:703:16
    |
703 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:716:16
    |
716 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:818:16
    |
818 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:827:16
    |
827 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:836:16
    |
836 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:869:16
    |
869 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:878:16
    |
878 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:970:16
    |
970 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:978:16
    |
978 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1038:16
     |
1038 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1061:16
     |
1061 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1072:16
     |
1072 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1090:16
     |
1090 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1164:16
     |
1164 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1174:16
     |
1174 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:361:20
    |
361 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:897:20
    |
897 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:996:20
    |
996 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1047:20
     |
1047 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                    ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1194:16
     |
1194 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1203:16
     |
1203 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1214:16
     |
1214 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1228:16
     |
1228 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1238:16
     |
1238 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1259:16
     |
1259 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1266:16
     |
1266 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1275:16
     |
1275 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1282:16
     |
1282 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1290:16
     |
1290 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1298:16
     |
1298 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1307:16
     |
1307 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1316:16
     |
1316 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1323:16
     |
1323 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1330:16
     |
1330 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1354:16
     |
1354 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1366:16
     |
1366 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/ty.rs:1374:16
     |
1374 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:16:16
   |
16 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:17:20
   |
17 |     #[cfg_attr(not(syn_no_non_exhaustive), non_exhaustive)]
   |                    ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:5:1
    |
5   | / ast_enum_of_structs! {
6   | |     /// A pattern in a local binding, function signature, match expression, or
7   | |     /// various other places.
8   | |     ///
...   |
97  | |     }
98  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:104:16
    |
104 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:119:16
    |
119 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:136:16
    |
136 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:147:16
    |
147 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:158:16
    |
158 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:176:16
    |
176 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:188:16
    |
188 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:201:16
    |
201 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:214:16
    |
214 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:225:16
    |
225 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:237:16
    |
237 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:251:16
    |
251 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:263:16
    |
263 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:275:16
    |
275 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:288:16
    |
288 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:302:16
    |
302 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:94:15
   |
94 |         #[cfg(syn_no_non_exhaustive)]
   |               ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:318:16
    |
318 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:766:16
    |
766 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:774:16
    |
774 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:788:16
    |
788 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:804:16
    |
804 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:813:16
    |
813 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:823:16
    |
823 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:831:16
    |
831 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:841:16
    |
841 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:850:16
    |
850 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:860:16
    |
860 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:868:16
    |
868 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:876:16
    |
876 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:886:16
    |
886 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:896:16
    |
896 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:904:16
    |
904 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/pat.rs:913:16
    |
913 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:9:16
  |
9 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
  |                ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:35:16
   |
35 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:67:16
   |
67 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:106:16
    |
106 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:131:16
    |
131 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:145:16
    |
145 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:158:16
    |
158 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:172:16
    |
172 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:202:16
    |
202 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:219:16
    |
219 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:226:16
    |
226 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:359:16
    |
359 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:386:16
    |
386 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:398:16
    |
398 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:431:16
    |
431 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:443:16
    |
443 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:506:20
    |
506 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:570:20
    |
570 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:592:20
    |
592 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:694:16
    |
694 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:702:16
    |
702 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:710:16
    |
710 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:725:16
    |
725 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:753:16
    |
753 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:810:16
    |
810 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:819:16
    |
819 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/path.rs:828:16
    |
828 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/punctuated.rs:370:12
    |
370 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/punctuated.rs:385:12
    |
385 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/punctuated.rs:394:12
    |
394 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/punctuated.rs:407:12
    |
407 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/punctuated.rs:421:12
    |
421 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/punctuated.rs:968:12
    |
968 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_const_vec_new`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/punctuated.rs:53:15
   |
53 |     #[cfg(not(syn_no_const_vec_new))]
   |               ^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_const_vec_new)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_const_vec_new)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_const_vec_new`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/punctuated.rs:62:11
   |
62 |     #[cfg(syn_no_const_vec_new)]
   |           ^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_const_vec_new)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_const_vec_new)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/punctuated.rs:266:16
    |
266 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/punctuated.rs:287:16
    |
287 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/punctuated.rs:324:16
    |
324 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/punctuated.rs:345:16
    |
345 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/punctuated.rs:1016:16
     |
1016 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/punctuated.rs:1027:16
     |
1027 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/parse_quote.rs:68:12
   |
68 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "printing"))))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/parse_quote.rs:100:12
    |
100 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "printing"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/parse_macro_input.rs:107:12
    |
107 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "proc-macro"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:4:1
    |
4   | / ast_enum_of_structs! {
5   | |     pub enum Publish {
6   | |         Closed(Closed),
7   | |         Open(Open),
...   |
10  | |     }
11  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:34:1
    |
34  | / ast_enum_of_structs! {
35  | |     pub enum Mode {
36  | |         Spec(ModeSpec),
37  | |         Proof(ModeProof),
...   |
40  | |     }
41  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:43:1
    |
43  | / ast_enum_of_structs! {
44  | |     pub enum FnMode {
45  | |         Spec(ModeSpec),
46  | |         SpecChecked(ModeSpecChecked),
...   |
50  | |     }
51  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:53:1
    |
53  | / ast_enum_of_structs! {
54  | |     pub enum DataMode {
55  | |         Ghost(ModeGhost),
56  | |         Tracked(ModeTracked),
...   |
59  | |     }
60  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:172:1
    |
172 | / ast_enum_of_structs! {
173 | |     pub enum InvariantNameSet {
174 | |         Any(InvariantNameSetAny),
175 | |         None(InvariantNameSetNone),
176 | |         List(InvariantNameSetList),
177 | |     }
178 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:355:1
    |
355 | / ast_enum_of_structs! {
356 | |     pub enum GlobalInner {
357 | |         SizeOf(GlobalSizeOf),
358 | |         Layout(GlobalLayout),
359 | |     }
360 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:395:16
    |
395 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:419:16
    |
419 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:437:16
    |
437 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:455:16
    |
455 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:490:16
    |
490 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:541:16
    |
541 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:551:16
    |
551 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:568:16
    |
568 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:582:16
    |
582 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:592:16
    |
592 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:602:16
    |
602 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:612:16
    |
612 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:622:16
    |
622 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:648:16
    |
648 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:661:16
    |
661 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:672:16
    |
672 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:691:16
    |
691 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:699:16
    |
699 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:707:16
    |
707 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:720:16
    |
720 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:731:16
    |
731 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:742:16
    |
742 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:753:16
    |
753 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:764:16
    |
764 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:775:16
    |
775 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:786:16
    |
786 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:797:16
    |
797 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:808:16
    |
808 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:828:16
    |
828 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:892:16
    |
892 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:946:16
    |
946 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:992:16
    |
992 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1020:16
     |
1020 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1043:16
     |
1043 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1060:16
     |
1060 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1077:16
     |
1077 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1112:16
     |
1112 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1156:16
     |
1156 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1163:16
     |
1163 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1170:16
     |
1170 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1177:16
     |
1177 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1184:16
     |
1184 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1191:16
     |
1191 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1201:16
     |
1201 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1208:16
     |
1208 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1216:16
     |
1216 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1224:16
     |
1224 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1232:16
     |
1232 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1240:16
     |
1240 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1248:16
     |
1248 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1256:16
     |
1256 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1264:16
     |
1264 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1279:16
     |
1279 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1287:16
     |
1287 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1294:16
     |
1294 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1301:16
     |
1301 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1310:16
     |
1310 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1321:16
     |
1321 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1344:16
     |
1344 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1363:16
     |
1363 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1383:16
     |
1383 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1400:16
     |
1400 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1422:16
     |
1422 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1431:16
     |
1431 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1443:16
     |
1443 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1453:16
     |
1453 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1463:16
     |
1463 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1473:16
     |
1473 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1483:16
     |
1483 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1493:16
     |
1493 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1510:16
     |
1510 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1520:16
     |
1520 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/verus.rs:1538:16
     |
1538 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:7:12
  |
7 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
  |            ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:17:12
   |
17 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:29:12
   |
29 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:42:12
   |
42 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:57:12
   |
57 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:74:12
   |
74 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:86:12
   |
86 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:89:12
   |
89 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:96:12
   |
96 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:109:12
    |
109 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:119:12
    |
119 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:127:12
    |
127 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:134:12
    |
134 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:137:12
    |
137 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:144:12
    |
144 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:155:12
    |
155 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:165:12
    |
165 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:176:12
    |
176 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:187:12
    |
187 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:196:12
    |
196 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:211:12
    |
211 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:222:12
    |
222 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:233:12
    |
233 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:243:12
    |
243 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:255:12
    |
255 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:266:12
    |
266 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:275:12
    |
275 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:285:12
    |
285 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:298:12
    |
298 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:309:12
    |
309 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:411:12
    |
411 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:422:12
    |
422 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:434:12
    |
434 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:446:12
    |
446 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:458:12
    |
458 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:470:12
    |
470 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:482:12
    |
482 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:493:12
    |
493 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:504:12
    |
504 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:516:12
    |
516 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:528:12
    |
528 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:540:12
    |
540 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:560:12
    |
560 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:571:12
    |
571 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:583:12
    |
583 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:600:12
    |
600 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:612:12
    |
612 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:622:12
    |
622 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:634:12
    |
634 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:647:12
    |
647 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:658:12
    |
658 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:670:12
    |
670 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:683:12
    |
683 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:693:12
    |
693 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:710:12
    |
710 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:720:12
    |
720 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:732:12
    |
732 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:745:12
    |
745 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:760:12
    |
760 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:771:12
    |
771 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:782:12
    |
782 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:794:12
    |
794 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:807:12
    |
807 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:820:12
    |
820 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:831:12
    |
831 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:845:12
    |
845 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:856:12
    |
856 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:867:12
    |
867 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:878:12
    |
878 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:890:12
    |
890 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:901:12
    |
901 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:912:12
    |
912 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:930:12
    |
930 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:941:12
    |
941 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:955:12
    |
955 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:967:12
    |
967 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:979:12
    |
979 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:990:12
    |
990 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1000:12
     |
1000 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1010:12
     |
1010 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1021:12
     |
1021 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1031:12
     |
1031 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1040:12
     |
1040 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1053:12
     |
1053 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1068:12
     |
1068 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1080:12
     |
1080 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1091:12
     |
1091 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1107:12
     |
1107 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1120:12
     |
1120 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1133:12
     |
1133 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1143:12
     |
1143 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1154:12
     |
1154 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1165:12
     |
1165 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1176:12
     |
1176 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1185:12
     |
1185 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1197:12
     |
1197 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1209:12
     |
1209 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1225:12
     |
1225 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1245:12
     |
1245 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1256:12
     |
1256 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1270:12
     |
1270 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1287:12
     |
1287 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1296:12
     |
1296 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1305:12
     |
1305 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1314:12
     |
1314 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1323:12
     |
1323 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1333:12
     |
1333 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1341:12
     |
1341 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1350:12
     |
1350 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1359:12
     |
1359 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1388:12
     |
1388 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1402:12
     |
1402 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1423:12
     |
1423 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1439:12
     |
1439 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1454:12
     |
1454 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1467:12
     |
1467 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1479:12
     |
1479 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1496:12
     |
1496 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1508:12
     |
1508 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1521:12
     |
1521 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1535:12
     |
1535 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1557:12
     |
1557 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1573:12
     |
1573 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1592:12
     |
1592 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1608:12
     |
1608 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1624:12
     |
1624 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1638:12
     |
1638 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1652:12
     |
1652 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1662:12
     |
1662 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1673:12
     |
1673 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1688:12
     |
1688 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1698:12
     |
1698 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1713:12
     |
1713 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1725:12
     |
1725 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1735:12
     |
1735 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1744:12
     |
1744 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1755:12
     |
1755 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1765:12
     |
1765 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1776:12
     |
1776 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1787:12
     |
1787 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1798:12
     |
1798 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1809:12
     |
1809 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1820:12
     |
1820 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1828:12
     |
1828 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1836:12
     |
1836 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1844:12
     |
1844 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1852:12
     |
1852 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1862:12
     |
1862 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1871:12
     |
1871 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1880:12
     |
1880 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1886:12
     |
1886 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1898:12
     |
1898 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1909:12
     |
1909 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1935:12
     |
1935 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1946:12
     |
1946 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1959:12
     |
1959 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1969:12
     |
1969 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1979:12
     |
1979 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1990:12
     |
1990 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2001:12
     |
2001 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2013:12
     |
2013 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2025:12
     |
2025 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2035:12
     |
2035 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2046:12
     |
2046 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2059:12
     |
2059 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2070:12
     |
2070 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2081:12
     |
2081 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2093:12
     |
2093 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2103:12
     |
2103 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2113:12
     |
2113 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2126:12
     |
2126 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2136:12
     |
2136 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2147:12
     |
2147 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2158:12
     |
2158 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2169:12
     |
2169 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2181:12
     |
2181 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2194:12
     |
2194 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2197:12
     |
2197 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2204:12
     |
2204 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2215:12
     |
2215 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2225:12
     |
2225 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2235:12
     |
2235 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2246:12
     |
2246 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2261:12
     |
2261 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2288:12
     |
2288 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2298:12
     |
2298 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2307:12
     |
2307 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2316:12
     |
2316 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2328:12
     |
2328 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2340:12
     |
2340 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2343:12
     |
2343 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2350:12
     |
2350 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2365:12
     |
2365 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2382:12
     |
2382 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2393:12
     |
2393 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2405:12
     |
2405 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2421:12
     |
2421 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2447:12
     |
2447 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2459:12
     |
2459 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2474:12
     |
2474 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2487:12
     |
2487 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2497:12
     |
2497 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2507:12
     |
2507 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2516:12
     |
2516 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2523:12
     |
2523 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2532:12
     |
2532 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2546:12
     |
2546 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2556:12
     |
2556 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2566:12
     |
2566 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2576:12
     |
2576 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2588:12
     |
2588 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2600:12
     |
2600 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2610:12
     |
2610 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2620:12
     |
2620 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2630:12
     |
2630 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2633:12
     |
2633 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2640:12
     |
2640 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2649:12
     |
2649 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2659:12
     |
2659 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2668:12
     |
2668 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2679:12
     |
2679 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2690:12
     |
2690 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2703:12
     |
2703 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2713:12
     |
2713 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2724:12
     |
2724 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2735:12
     |
2735 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2744:12
     |
2744 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2753:12
     |
2753 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2765:12
     |
2765 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2777:12
     |
2777 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2787:12
     |
2787 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:405:23
    |
405 |             #[cfg(any(syn_no_non_exhaustive, not(feature = "full")))]
    |                       ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1062:19
     |
1062 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1219:19
     |
1219 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1383:19
     |
1383 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:1929:19
     |
1929 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2359:19
     |
2359 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/clone.rs:2441:19
     |
2441 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:8:12
  |
8 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
  |            ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:11:12
   |
11 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:18:12
   |
18 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:21:12
   |
21 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:28:12
   |
28 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:31:12
   |
31 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:38:12
   |
38 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:40:12
   |
40 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:48:12
   |
48 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:50:12
   |
50 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:58:12
   |
58 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:60:12
   |
60 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:67:12
   |
67 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:70:12
   |
70 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:81:12
   |
81 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:84:12
   |
84 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:92:12
   |
92 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:95:12
   |
95 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:101:12
    |
101 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:103:12
    |
103 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:109:12
    |
109 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:111:12
    |
111 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:118:12
    |
118 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:121:12
    |
121 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:167:12
    |
167 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:170:12
    |
170 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:177:12
    |
177 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:180:12
    |
180 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:187:12
    |
187 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:190:12
    |
190 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:196:12
    |
196 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:198:12
    |
198 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:204:12
    |
204 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:206:12
    |
206 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:213:12
    |
213 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:216:12
    |
216 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:224:12
    |
224 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:227:12
    |
227 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:234:12
    |
234 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:237:12
    |
237 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:249:12
    |
249 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:252:12
    |
252 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:258:12
    |
258 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:260:12
    |
260 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:273:12
    |
273 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:276:12
    |
276 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:283:12
    |
283 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:286:12
    |
286 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:292:12
    |
292 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:294:12
    |
294 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:301:12
    |
301 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:304:12
    |
304 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:312:12
    |
312 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:314:12
    |
314 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:321:12
    |
321 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:324:12
    |
324 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:427:12
    |
427 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:430:12
    |
430 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:437:12
    |
437 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:440:12
    |
440 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:447:12
    |
447 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:450:12
    |
450 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:458:12
    |
458 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:461:12
    |
461 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:469:12
    |
469 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:472:12
    |
472 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:479:12
    |
479 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:482:12
    |
482 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:490:12
    |
490 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:493:12
    |
493 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:501:12
    |
501 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:504:12
    |
504 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:511:12
    |
511 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:514:12
    |
514 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:521:12
    |
521 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:524:12
    |
524 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:531:12
    |
531 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:534:12
    |
534 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:541:12
    |
541 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:544:12
    |
544 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:555:12
    |
555 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:558:12
    |
558 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:565:12
    |
565 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:568:12
    |
568 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:576:12
    |
576 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:579:12
    |
579 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:588:12
    |
588 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:590:12
    |
590 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:598:12
    |
598 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:601:12
    |
601 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:607:12
    |
607 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:609:12
    |
609 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:616:12
    |
616 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:619:12
    |
619 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:628:12
    |
628 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:631:12
    |
631 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:637:12
    |
637 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:639:12
    |
639 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:647:12
    |
647 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:650:12
    |
650 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:657:12
    |
657 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:660:12
    |
660 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:667:12
    |
667 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:670:12
    |
670 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:682:12
    |
682 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:685:12
    |
685 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:692:12
    |
692 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:695:12
    |
695 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:701:12
    |
701 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:703:12
    |
703 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:711:12
    |
711 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:714:12
    |
714 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:723:12
    |
723 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:726:12
    |
726 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:733:12
    |
733 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:736:12
    |
736 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:743:12
    |
743 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:746:12
    |
746 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:754:12
    |
754 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:757:12
    |
757 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:765:12
    |
765 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:768:12
    |
768 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:775:12
    |
775 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:778:12
    |
778 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:785:12
    |
785 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:788:12
    |
788 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:797:12
    |
797 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:800:12
    |
800 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:807:12
    |
807 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:810:12
    |
810 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:817:12
    |
817 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:820:12
    |
820 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:827:12
    |
827 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:830:12
    |
830 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:837:12
    |
837 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:840:12
    |
840 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:847:12
    |
847 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:850:12
    |
850 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:857:12
    |
857 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:860:12
    |
860 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:872:12
    |
872 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:875:12
    |
875 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:882:12
    |
882 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:885:12
    |
885 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:894:12
    |
894 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:897:12
    |
897 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:905:12
    |
905 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:908:12
    |
908 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:916:12
    |
916 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:919:12
    |
919 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:931:12
    |
931 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:934:12
    |
934 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:941:12
    |
941 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:944:12
    |
944 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:951:12
    |
951 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:954:12
    |
954 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:962:12
    |
962 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:965:12
    |
965 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:972:12
    |
972 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:975:12
    |
975 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:985:12
    |
985 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:987:12
    |
987 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1001:12
     |
1001 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1004:12
     |
1004 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1020:12
     |
1020 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1023:12
     |
1023 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1030:12
     |
1030 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1033:12
     |
1033 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1041:12
     |
1041 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1044:12
     |
1044 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1053:12
     |
1053 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1056:12
     |
1056 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1063:12
     |
1063 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1066:12
     |
1066 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1090:12
     |
1090 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1093:12
     |
1093 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1109:12
     |
1109 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1112:12
     |
1112 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1126:12
     |
1126 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1129:12
     |
1129 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1136:12
     |
1136 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1138:12
     |
1138 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1144:12
     |
1144 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1146:12
     |
1146 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1156:12
     |
1156 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1158:12
     |
1158 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1164:12
     |
1164 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1166:12
     |
1166 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1173:12
     |
1173 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1176:12
     |
1176 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1195:12
     |
1195 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1198:12
     |
1198 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1208:12
     |
1208 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1211:12
     |
1211 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1219:12
     |
1219 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1222:12
     |
1222 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1231:12
     |
1231 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1234:12
     |
1234 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1242:12
     |
1242 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1244:12
     |
1244 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1250:12
     |
1250 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1252:12
     |
1252 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1258:12
     |
1258 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1260:12
     |
1260 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1266:12
     |
1266 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1268:12
     |
1268 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1285:12
     |
1285 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1287:12
     |
1287 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1293:12
     |
1293 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1295:12
     |
1295 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1301:12
     |
1301 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1303:12
     |
1303 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1310:12
     |
1310 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1313:12
     |
1313 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1345:12
     |
1345 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1347:12
     |
1347 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1355:12
     |
1355 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1358:12
     |
1358 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1370:12
     |
1370 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1373:12
     |
1373 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1382:12
     |
1382 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1385:12
     |
1385 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1393:12
     |
1393 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1396:12
     |
1396 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1404:12
     |
1404 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1407:12
     |
1407 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1414:12
     |
1414 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1417:12
     |
1417 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1427:12
     |
1427 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1430:12
     |
1430 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1438:12
     |
1438 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1441:12
     |
1441 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1449:12
     |
1449 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1452:12
     |
1452 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1460:12
     |
1460 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1463:12
     |
1463 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1475:12
     |
1475 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1478:12
     |
1478 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1487:12
     |
1487 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1490:12
     |
1490 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1501:12
     |
1501 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1504:12
     |
1504 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1512:12
     |
1512 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1515:12
     |
1515 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1523:12
     |
1523 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1526:12
     |
1526 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1534:12
     |
1534 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1537:12
     |
1537 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1545:12
     |
1545 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1548:12
     |
1548 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1555:12
     |
1555 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1558:12
     |
1558 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1565:12
     |
1565 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1567:12
     |
1567 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1585:12
     |
1585 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1587:12
     |
1587 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1593:12
     |
1593 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1595:12
     |
1595 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1597:12
     |
1597 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1599:12
     |
1599 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1601:12
     |
1601 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1603:12
     |
1603 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1606:12
     |
1606 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1609:12
     |
1609 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1618:12
     |
1618 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1621:12
     |
1621 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1629:12
     |
1629 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1632:12
     |
1632 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1643:12
     |
1643 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1645:12
     |
1645 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1651:12
     |
1651 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1653:12
     |
1653 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1665:12
     |
1665 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1668:12
     |
1668 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1680:12
     |
1680 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1683:12
     |
1683 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1690:12
     |
1690 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1693:12
     |
1693 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1700:12
     |
1700 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1703:12
     |
1703 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1709:12
     |
1709 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1711:12
     |
1711 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1723:12
     |
1723 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1725:12
     |
1725 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1731:12
     |
1731 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1733:12
     |
1733 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1739:12
     |
1739 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1741:12
     |
1741 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1747:12
     |
1747 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1749:12
     |
1749 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1755:12
     |
1755 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1757:12
     |
1757 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1763:12
     |
1763 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1765:12
     |
1765 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1772:12
     |
1772 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1775:12
     |
1775 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1785:12
     |
1785 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1787:12
     |
1787 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1793:12
     |
1793 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1795:12
     |
1795 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1802:12
     |
1802 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1805:12
     |
1805 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1812:12
     |
1812 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1815:12
     |
1815 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1842:12
     |
1842 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1845:12
     |
1845 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1852:12
     |
1852 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1855:12
     |
1855 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1864:12
     |
1864 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1867:12
     |
1867 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1874:12
     |
1874 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1877:12
     |
1877 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1884:12
     |
1884 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1887:12
     |
1887 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1895:12
     |
1895 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1898:12
     |
1898 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1905:12
     |
1905 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1908:12
     |
1908 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1916:12
     |
1916 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1919:12
     |
1919 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1927:12
     |
1927 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1930:12
     |
1930 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1937:12
     |
1937 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1940:12
     |
1940 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1947:12
     |
1947 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1950:12
     |
1950 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1958:12
     |
1958 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1961:12
     |
1961 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1968:12
     |
1968 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1971:12
     |
1971 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1978:12
     |
1978 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1981:12
     |
1981 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1988:12
     |
1988 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1991:12
     |
1991 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:1998:12
     |
1998 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2001:12
     |
2001 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2008:12
     |
2008 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2011:12
     |
2011 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2029:12
     |
2029 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2032:12
     |
2032 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2039:12
     |
2039 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2042:12
     |
2042 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2049:12
     |
2049 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2052:12
     |
2052 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2059:12
     |
2059 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2062:12
     |
2062 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2069:12
     |
2069 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2071:12
     |
2071 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2086:12
     |
2086 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2089:12
     |
2089 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2097:12
     |
2097 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2100:12
     |
2100 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2111:12
     |
2111 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2114:12
     |
2114 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2121:12
     |
2121 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2123:12
     |
2123 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2129:12
     |
2129 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2131:12
     |
2131 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2138:12
     |
2138 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2141:12
     |
2141 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2154:12
     |
2154 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2156:12
     |
2156 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2166:12
     |
2166 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2169:12
     |
2169 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2183:12
     |
2183 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2185:12
     |
2185 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2192:12
     |
2192 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2194:12
     |
2194 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2200:12
     |
2200 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2202:12
     |
2202 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2209:12
     |
2209 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2212:12
     |
2212 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2225:12
     |
2225 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2228:12
     |
2228 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2236:12
     |
2236 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2239:12
     |
2239 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2250:12
     |
2250 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2253:12
     |
2253 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2269:12
     |
2269 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2272:12
     |
2272 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2281:12
     |
2281 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2284:12
     |
2284 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2292:12
     |
2292 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2295:12
     |
2295 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2303:12
     |
2303 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2306:12
     |
2306 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2315:12
     |
2315 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2318:12
     |
2318 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2345:12
     |
2345 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2348:12
     |
2348 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2355:12
     |
2355 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2358:12
     |
2358 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2366:12
     |
2366 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2368:12
     |
2368 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2377:12
     |
2377 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2380:12
     |
2380 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2387:12
     |
2387 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2390:12
     |
2390 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2397:12
     |
2397 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2400:12
     |
2400 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2407:12
     |
2407 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2410:12
     |
2410 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2417:12
     |
2417 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2420:12
     |
2420 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2427:12
     |
2427 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2430:12
     |
2430 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2439:12
     |
2439 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2442:12
     |
2442 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2457:12
     |
2457 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2460:12
     |
2460 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2467:12
     |
2467 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2470:12
     |
2470 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2477:12
     |
2477 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2480:12
     |
2480 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2488:12
     |
2488 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2491:12
     |
2491 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2499:12
     |
2499 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2502:12
     |
2502 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2509:12
     |
2509 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2512:12
     |
2512 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2519:12
     |
2519 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2522:12
     |
2522 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2529:12
     |
2529 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2532:12
     |
2532 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2548:12
     |
2548 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2551:12
     |
2551 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2558:12
     |
2558 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2561:12
     |
2561 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2568:12
     |
2568 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2571:12
     |
2571 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2578:12
     |
2578 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2581:12
     |
2581 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2588:12
     |
2588 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2591:12
     |
2591 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2598:12
     |
2598 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2601:12
     |
2601 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2615:12
     |
2615 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2618:12
     |
2618 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2625:12
     |
2625 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2628:12
     |
2628 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2635:12
     |
2635 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2637:12
     |
2637 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2644:12
     |
2644 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2647:12
     |
2647 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2654:12
     |
2654 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2657:12
     |
2657 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2664:12
     |
2664 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2667:12
     |
2667 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2674:12
     |
2674 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2677:12
     |
2677 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2692:12
     |
2692 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2695:12
     |
2695 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2702:12
     |
2702 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/eq.rs:2705:12
     |
2705 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:9:12
  |
9 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
  |            ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:19:12
   |
19 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:30:12
   |
30 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:43:12
   |
43 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:57:12
   |
57 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:70:12
   |
70 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:81:12
   |
81 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:98:12
   |
98 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:110:12
    |
110 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:121:12
    |
121 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:130:12
    |
130 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:140:12
    |
140 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:262:12
    |
262 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:273:12
    |
273 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:283:12
    |
283 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:292:12
    |
292 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:302:12
    |
302 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:310:12
    |
310 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:324:12
    |
324 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:335:12
    |
335 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:358:12
    |
358 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:367:12
    |
367 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:393:12
    |
393 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:404:12
    |
404 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:413:12
    |
413 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:423:12
    |
423 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:437:12
    |
437 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:448:12
    |
448 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:706:12
    |
706 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:717:12
    |
717 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:729:12
    |
729 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:742:12
    |
742 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:754:12
    |
754 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:765:12
    |
765 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:778:12
    |
778 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:790:12
    |
790 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:801:12
    |
801 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:813:12
    |
813 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:825:12
    |
825 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:837:12
    |
837 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:856:12
    |
856 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:867:12
    |
867 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:879:12
    |
879 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:895:12
    |
895 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:907:12
    |
907 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:917:12
    |
917 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:929:12
    |
929 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:942:12
    |
942 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:953:12
    |
953 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:965:12
    |
965 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:977:12
    |
977 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:988:12
    |
988 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1005:12
     |
1005 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1016:12
     |
1016 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1027:12
     |
1027 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1040:12
     |
1040 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1054:12
     |
1054 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1065:12
     |
1065 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1077:12
     |
1077 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1090:12
     |
1090 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1102:12
     |
1102 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1114:12
     |
1114 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1125:12
     |
1125 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1139:12
     |
1139 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1150:12
     |
1150 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1161:12
     |
1161 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1172:12
     |
1172 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1184:12
     |
1184 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1196:12
     |
1196 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1207:12
     |
1207 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1225:12
     |
1225 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1236:12
     |
1236 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1251:12
     |
1251 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1264:12
     |
1264 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1277:12
     |
1277 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1299:12
     |
1299 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1309:12
     |
1309 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1319:12
     |
1319 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1331:12
     |
1331 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1342:12
     |
1342 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1360:12
     |
1360 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1390:12
     |
1390 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1423:12
     |
1423 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1435:12
     |
1435 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1447:12
     |
1447 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1461:12
     |
1461 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1473:12
     |
1473 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1504:12
     |
1504 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1523:12
     |
1523 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1546:12
     |
1546 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1558:12
     |
1558 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1568:12
     |
1568 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1586:12
     |
1586 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1597:12
     |
1597 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1608:12
     |
1608 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1645:12
     |
1645 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1662:12
     |
1662 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1674:12
     |
1674 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1689:12
     |
1689 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1703:12
     |
1703 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1712:12
     |
1712 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1721:12
     |
1721 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1730:12
     |
1730 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1752:12
     |
1752 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1759:12
     |
1759 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1768:12
     |
1768 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1776:12
     |
1776 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1868:12
     |
1868 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1881:12
     |
1881 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1901:12
     |
1901 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1916:12
     |
1916 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1929:12
     |
1929 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1943:12
     |
1943 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1955:12
     |
1955 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1971:12
     |
1971 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1984:12
     |
1984 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1997:12
     |
1997 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2011:12
     |
2011 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2032:12
     |
2032 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2048:12
     |
2048 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2066:12
     |
2066 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2080:12
     |
2080 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2094:12
     |
2094 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2108:12
     |
2108 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2121:12
     |
2121 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2131:12
     |
2131 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2143:12
     |
2143 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2185:12
     |
2185 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2195:12
     |
2195 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2209:12
     |
2209 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2221:12
     |
2221 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2240:12
     |
2240 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2250:12
     |
2250 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2270:12
     |
2270 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2293:12
     |
2293 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2304:12
     |
2304 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2315:12
     |
2315 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2324:12
     |
2324 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2349:12
     |
2349 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2356:12
     |
2356 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2363:12
     |
2363 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2370:12
     |
2370 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2377:12
     |
2377 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2386:12
     |
2386 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2394:12
     |
2394 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2412:12
     |
2412 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2419:12
     |
2419 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2430:12
     |
2430 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2441:12
     |
2441 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2518:12
     |
2518 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2529:12
     |
2529 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2543:12
     |
2543 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2554:12
     |
2554 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2565:12
     |
2565 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2577:12
     |
2577 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2589:12
     |
2589 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2602:12
     |
2602 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2614:12
     |
2614 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2624:12
     |
2624 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2635:12
     |
2635 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2648:12
     |
2648 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2659:12
     |
2659 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2671:12
     |
2671 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2683:12
     |
2683 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2693:12
     |
2693 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2704:12
     |
2704 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2726:12
     |
2726 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2737:12
     |
2737 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2748:12
     |
2748 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2759:12
     |
2759 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2770:12
     |
2770 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2796:12
     |
2796 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2808:12
     |
2808 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2825:12
     |
2825 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2836:12
     |
2836 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2846:12
     |
2846 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2856:12
     |
2856 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2875:12
     |
2875 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2890:12
     |
2890 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2916:12
     |
2916 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2927:12
     |
2927 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2936:12
     |
2936 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2946:12
     |
2946 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2973:12
     |
2973 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2986:12
     |
2986 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3003:12
     |
3003 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3036:12
     |
3036 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3051:12
     |
3051 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3063:12
     |
3063 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3076:12
     |
3076 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3091:12
     |
3091 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3168:12
     |
3168 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3179:12
     |
3179 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3193:12
     |
3193 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3206:12
     |
3206 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3216:12
     |
3216 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3226:12
     |
3226 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3234:12
     |
3234 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3244:12
     |
3244 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3252:12
     |
3252 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3267:12
     |
3267 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3286:12
     |
3286 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3296:12
     |
3296 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3307:12
     |
3307 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3319:12
     |
3319 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3331:12
     |
3331 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3341:12
     |
3341 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3352:12
     |
3352 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3362:12
     |
3362 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3394:12
     |
3394 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3402:12
     |
3402 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3412:12
     |
3412 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3422:12
     |
3422 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3433:12
     |
3433 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3444:12
     |
3444 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3475:12
     |
3475 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3485:12
     |
3485 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3497:12
     |
3497 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3508:12
     |
3508 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3516:12
     |
3516 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3524:12
     |
3524 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3535:12
     |
3535 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3561:12
     |
3561 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3571:12
     |
3571 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:700:23
    |
700 |             #[cfg(any(syn_no_non_exhaustive, not(feature = "full")))]
    |                       ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1417:19
     |
1417 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1639:19
     |
1639 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:1863:19
     |
1863 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:2512:19
     |
2512 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3030:19
     |
3030 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/hash.rs:3162:19
     |
3162 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:7:12
  |
7 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
  |            ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:17:12
   |
17 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:29:12
   |
29 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:42:12
   |
42 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:57:12
   |
57 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:74:12
   |
74 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:86:12
   |
86 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:100:12
    |
100 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:113:12
    |
113 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:123:12
    |
123 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:131:12
    |
131 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:140:12
    |
140 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:333:12
    |
333 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:344:12
    |
344 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:354:12
    |
354 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:365:12
    |
365 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:376:12
    |
376 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:385:12
    |
385 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:400:12
    |
400 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:411:12
    |
411 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:434:12
    |
434 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:444:12
    |
444 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:468:12
    |
468 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:479:12
    |
479 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:488:12
    |
488 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:498:12
    |
498 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:511:12
    |
511 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:522:12
    |
522 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:828:12
    |
828 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:839:12
    |
839 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:851:12
    |
851 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:863:12
    |
863 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:875:12
    |
875 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:887:12
    |
887 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:899:12
    |
899 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:910:12
    |
910 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:921:12
    |
921 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:933:12
    |
933 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:945:12
    |
945 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:957:12
    |
957 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:977:12
    |
977 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:988:12
    |
988 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1000:12
     |
1000 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1017:12
     |
1017 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1029:12
     |
1029 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1039:12
     |
1039 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1051:12
     |
1051 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1064:12
     |
1064 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1075:12
     |
1075 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1087:12
     |
1087 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1100:12
     |
1100 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1110:12
     |
1110 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1127:12
     |
1127 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1137:12
     |
1137 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1149:12
     |
1149 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1162:12
     |
1162 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1177:12
     |
1177 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1188:12
     |
1188 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1199:12
     |
1199 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1211:12
     |
1211 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1224:12
     |
1224 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1237:12
     |
1237 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1248:12
     |
1248 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1262:12
     |
1262 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1273:12
     |
1273 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1284:12
     |
1284 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1295:12
     |
1295 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1307:12
     |
1307 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1318:12
     |
1318 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1329:12
     |
1329 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1347:12
     |
1347 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1358:12
     |
1358 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1372:12
     |
1372 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1384:12
     |
1384 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1396:12
     |
1396 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1415:12
     |
1415 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1425:12
     |
1425 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1435:12
     |
1435 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1446:12
     |
1446 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1456:12
     |
1456 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1473:12
     |
1473 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1502:12
     |
1502 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1537:12
     |
1537 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1549:12
     |
1549 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1560:12
     |
1560 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1576:12
     |
1576 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1589:12
     |
1589 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1622:12
     |
1622 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1640:12
     |
1640 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1663:12
     |
1663 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1674:12
     |
1674 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1685:12
     |
1685 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1702:12
     |
1702 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1714:12
     |
1714 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1726:12
     |
1726 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1766:12
     |
1766 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1786:12
     |
1786 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1797:12
     |
1797 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1811:12
     |
1811 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1828:12
     |
1828 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1837:12
     |
1837 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1846:12
     |
1846 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1855:12
     |
1855 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1864:12
     |
1864 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1886:12
     |
1886 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1894:12
     |
1894 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1903:12
     |
1903 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1912:12
     |
1912 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2021:12
     |
2021 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2035:12
     |
2035 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2056:12
     |
2056 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2072:12
     |
2072 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2087:12
     |
2087 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2100:12
     |
2100 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2112:12
     |
2112 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2129:12
     |
2129 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2141:12
     |
2141 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2154:12
     |
2154 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2168:12
     |
2168 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2190:12
     |
2190 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2206:12
     |
2206 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2225:12
     |
2225 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2241:12
     |
2241 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2257:12
     |
2257 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2271:12
     |
2271 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2285:12
     |
2285 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2294:12
     |
2294 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2304:12
     |
2304 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2315:12
     |
2315 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2363:12
     |
2363 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2378:12
     |
2378 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2390:12
     |
2390 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2412:12
     |
2412 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2421:12
     |
2421 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2440:12
     |
2440 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2458:12
     |
2458 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2481:12
     |
2481 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2492:12
     |
2492 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2503:12
     |
2503 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2514:12
     |
2514 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2537:12
     |
2537 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2545:12
     |
2545 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2553:12
     |
2553 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2561:12
     |
2561 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2569:12
     |
2569 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2579:12
     |
2579 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2588:12
     |
2588 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2605:12
     |
2605 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2613:12
     |
2613 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2625:12
     |
2625 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2636:12
     |
2636 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2726:12
     |
2726 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2737:12
     |
2737 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2750:12
     |
2750 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2760:12
     |
2760 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2770:12
     |
2770 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2781:12
     |
2781 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2792:12
     |
2792 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2804:12
     |
2804 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2816:12
     |
2816 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2826:12
     |
2826 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2837:12
     |
2837 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2850:12
     |
2850 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2861:12
     |
2861 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2872:12
     |
2872 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2884:12
     |
2884 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2894:12
     |
2894 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2904:12
     |
2904 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2923:12
     |
2923 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2933:12
     |
2933 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2944:12
     |
2944 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2955:12
     |
2955 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2966:12
     |
2966 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2990:12
     |
2990 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3003:12
     |
3003 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3021:12
     |
3021 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3032:12
     |
3032 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3042:12
     |
3042 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3052:12
     |
3052 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3068:12
     |
3068 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3083:12
     |
3083 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3110:12
     |
3110 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3120:12
     |
3120 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3129:12
     |
3129 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3138:12
     |
3138 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3167:12
     |
3167 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3179:12
     |
3179 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3193:12
     |
3193 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3228:12
     |
3228 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3245:12
     |
3245 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3256:12
     |
3256 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3268:12
     |
3268 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3284:12
     |
3284 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3374:12
     |
3374 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3386:12
     |
3386 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3401:12
     |
3401 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3414:12
     |
3414 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3424:12
     |
3424 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3434:12
     |
3434 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3443:12
     |
3443 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3452:12
     |
3452 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3461:12
     |
3461 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3475:12
     |
3475 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3493:12
     |
3493 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3503:12
     |
3503 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3513:12
     |
3513 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3525:12
     |
3525 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3537:12
     |
3537 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3547:12
     |
3547 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3557:12
     |
3557 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3567:12
     |
3567 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3610:12
     |
3610 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3619:12
     |
3619 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3629:12
     |
3629 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3638:12
     |
3638 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3649:12
     |
3649 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3660:12
     |
3660 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3693:12
     |
3693 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3703:12
     |
3703 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3714:12
     |
3714 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3725:12
     |
3725 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3734:12
     |
3734 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3743:12
     |
3743 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3755:12
     |
3755 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3779:12
     |
3779 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3789:12
     |
3789 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:822:23
    |
822 |             #[cfg(any(syn_no_non_exhaustive, not(feature = "full")))]
    |                       ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1531:19
     |
1531 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:1760:19
     |
1760 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2016:19
     |
2016 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:2720:19
     |
2720 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3222:19
     |
3222 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/gen/debug.rs:3368:19
     |
3368 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `crate::gen::*`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/lib.rs:795:9
    |
795 | pub use crate::gen::*;
    |         ^^^^^^^^^^^^^
    |
    = note: `#[warn(unused_imports)]` on by default

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/parse.rs:1065:12
     |
1065 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/parse.rs:1072:12
     |
1072 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/parse.rs:1083:12
     |
1083 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/parse.rs:1090:12
     |
1090 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/parse.rs:1100:12
     |
1100 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/parse.rs:1116:12
     |
1116 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/parse.rs:1126:12
     |
1126 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/parse.rs:1291:12
     |
1291 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/parse.rs:1299:12
     |
1299 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/parse.rs:1303:12
     |
1303 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/parse.rs:1311:12
     |
1311 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/reserved.rs:29:12
   |
29 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/syn/src/reserved.rs:39:12
   |
39 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `syn_verus` (lib) generated 2230 warnings (336 duplicates) (run `cargo fix --lib -p syn_verus` to apply 1 suggestion)
warning: unexpected `cfg` condition name: `exhaustive`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/prettyplease/src/lib.rs:340:23
    |
340 | #![cfg_attr(all(test, exhaustive), feature(non_exhaustive_omitted_patterns_lint))]
    |                       ^^^^^^^^^^
    |
    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `prettyplease_debug`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/prettyplease/src/algorithm.rs:287:17
    |
287 |         if cfg!(prettyplease_debug) {
    |                 ^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(prettyplease_debug)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(prettyplease_debug)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `prettyplease_debug_indent`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/prettyplease/src/algorithm.rs:292:21
    |
292 |             if cfg!(prettyplease_debug_indent) {
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(prettyplease_debug_indent)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(prettyplease_debug_indent)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `prettyplease_debug`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/prettyplease/src/algorithm.rs:320:17
    |
320 |         if cfg!(prettyplease_debug) {
    |                 ^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(prettyplease_debug)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(prettyplease_debug)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `prettyplease_debug`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/prettyplease/src/algorithm.rs:342:21
    |
342 |             if cfg!(prettyplease_debug) {
    |                     ^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(prettyplease_debug)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(prettyplease_debug)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `prettyplease_debug`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/prettyplease/src/algorithm.rs:350:21
    |
350 |             if cfg!(prettyplease_debug) {
    |                     ^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(prettyplease_debug)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(prettyplease_debug)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `exhaustive`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/prettyplease/src/expr.rs:75:34
   |
75 |             #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]
   |                                  ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `exhaustive`
    --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/prettyplease/src/expr.rs:1228:30
     |
1228 |         #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]
     |                              ^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `exhaustive`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/prettyplease/src/item.rs:34:34
   |
34 |             #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]
   |                                  ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `exhaustive`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/prettyplease/src/item.rs:496:34
    |
496 |             #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]
    |                                  ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `exhaustive`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/prettyplease/src/item.rs:584:34
    |
584 |             #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]
    |                                  ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `exhaustive`
   --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/prettyplease/src/item.rs:676:34
    |
676 |             #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]
    |                                  ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `exhaustive`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/prettyplease/src/pat.rs:29:34
   |
29 |             #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]
   |                                  ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `exhaustive`
  --> /home/XXXX/verus-copilot-review/utils/lynette/dependencies/prettyplease/src/ty.rs:30:34
   |
30 |             #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]
   |                                  ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `prettyplease_verus` (lib) generated 14 warnings
warning: unused import: `crate::func::extract_functions_by_name`
 --> lynette/src/merge/mod.rs:4:5
  |
4 | use crate::func::extract_functions_by_name;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `syn::ext`
 --> lynette/src/merge/mod.rs:6:5
  |
6 | use syn::ext;
  |     ^^^^^^^^

warning: method `get_args` is never used
   --> lynette/src/utils.rs:342:8
    |
340 | pub trait FnMethodExt {
    |           ----------- method in this trait
341 |     fn get_name(&self) -> String;
342 |     fn get_args(
    |        ^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: `lynette` (bin "lynette") generated 3 warnings (run `cargo fix --bin "lynette"` to apply 2 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.06s
     Running `/home/XXXX/verus-copilot-review/utils/lynette/source/target/debug/lynette compare -t /tmp/llm4v_origwqtzn3xl.rs /tmp/llm4v_changeddeadrcip.rs`
thread 'main' panicked at lynette/src/utils.rs:104:56:
called `Result::unwrap()` on an `Err` value: LexError { span: bytes(3324..3324) }
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
2024-09-04 15:16:19 INFO: repair-7-1 file generated
2024-09-04 15:16:19 INFO: Compilation Error: True, Verified: -1, Errors: 999, Verus Errors: 1
2024-09-04 15:16:19 WARNING: The repair is not safe.
2024-09-04 15:16:19 INFO: repair-7-2 file generated
2024-09-04 15:16:19 INFO: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 4
2024-09-04 15:16:20 INFO: Step 8: VerusErrorType.InvFailFront with num=5.
2024-09-04 15:16:20 INFO: Current score: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 4
2024-09-04 15:16:25 INFO: Infer time: 4.9861884117126465s
2024-09-04 15:16:25 INFO: Here is the quick fix output
2024-09-04 15:16:26 INFO: [repair_invfail_front] Quick fix is not effective. Move on to more general fix attempts.
2024-09-04 15:16:32 INFO: Infer time: 5.493007659912109s
2024-09-04 15:16:32 INFO: repair-8-0 file generated
2024-09-04 15:16:32 INFO: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 4
2024-09-04 15:16:33 INFO: Step 8: VerusErrorType.InvFailFront is fixed based on finer-grained check.
2024-09-04 15:16:33 INFO: Step 9: VerusErrorType.InvFailFront with num=3.
2024-09-04 15:16:33 INFO: Current score: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 4
2024-09-04 15:16:33 INFO: Infer time: 0.5932109355926514s
2024-09-04 15:16:33 INFO: Here is the quick fix output
2024-09-04 15:16:34 ERROR: Error in comparing code changes: 
2024-09-04 15:16:34 INFO: [repair_invfail_front] Quick fix is not safe. Move on to more general fix.
2024-09-04 15:16:39 INFO: Infer time: 5.387579917907715s
2024-09-04 15:16:39 INFO: repair-9-0 file generated
2024-09-04 15:16:39 INFO: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 4
2024-09-04 15:16:40 INFO: repair-9-1 file generated
2024-09-04 15:16:40 INFO: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 4
2024-09-04 15:16:41 INFO: repair-9-2 file generated
2024-09-04 15:16:41 INFO: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 5
2024-09-04 15:16:41 WARNING: The repair is not safe.
2024-09-04 15:16:41 INFO: Step 10: VerusErrorType.InvFailFront with num=5.
2024-09-04 15:16:41 INFO: Current score: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 4
2024-09-04 15:16:46 INFO: Infer time: 5.016484498977661s
2024-09-04 15:16:46 INFO: Here is the quick fix output
2024-09-04 15:16:46 ERROR: Error in comparing code changes: 
2024-09-04 15:16:46 INFO: [repair_invfail_front] Quick fix is not safe. Move on to more general fix.
2024-09-04 15:16:47 INFO: Retrying request to /deployments/gpt-35-turbo/chat/completions in 60.000000 seconds
2024-09-04 15:17:52 INFO: Infer time: 65.57913136482239s
2024-09-04 15:17:52 INFO: repair-10-0 file generated
2024-09-04 15:17:52 INFO: Compilation Error: False, Verified: 0, Errors: 1, Verus Errors: 4
2024-09-04 15:17:53 INFO: Step 10: VerusErrorType.InvFailFront is fixed based on finer-grained check.
2024-09-04 15:17:54 INFO: Houdini code is better
2024-09-04 15:17:55 INFO: finished!
Start repair
Warning: a non type error is passed to debug_type_error
Warning: a non type error is passed to debug_type_error
Warning: a non type error is passed to debug_type_error
Warning: a non type error is passed to debug_type_error
Warning: a non type error is passed to debug_type_error
Warning: a non type error is passed to debug_type_error
Warning: a non type error is passed to debug_type_error

            sum >= N ==> i > 0,


a[( i ) as int] >= i as i32 && i >= 0,

Warning: a non type error is passed to debug_type_error

use vstd::prelude::*;
fn main() {}
verus! {

#[verifier::loop_isolation(false)]

pub fn simple_nested(a: &mut Vec<i32>, b: &Vec<i32>, N: i32) -> (sum: i32)
    requires
        forall|k: int| k <= # [trigger] b[k] <= k + 1,
        old(a).len() == N,
        b.len() == N,
        N <= 0x3FFF_FFFF,
    ensures
        N <= sum <= 2 * N,
{
    let mut i: usize = 0;
    let mut sum: i32 = 0;
    assert(sum >= N); // Added by AI
    while (i < N as usize)
        invariant
            N <= 0x3FFF_FFFF,
            b.len() == N,
            forall|k: int| k <= # [trigger] b[k] <= k + 1,
            i <= N as usize,
            old(a).len() == N,
            sum <= 2 * N,
            sum >= N,
            a.len() == N, 
            i >= 0,
            a[( i ) as int] >= i as i32, // Changed by AI, ensuring a[i] is greater than or equal to i conditioned on loop index
            a[( i ) as int] <= N, // Added by AI using N as the upper bound for a[i]
            sum + a[( i ) as int] >= sum, // Added by AI, ensuring no arithmetic overflow
    {
        a.set(i, b[i] + 1);
        let mut j: usize = 0;
        while (j < i)
            invariant
                j <= i,
                a.len() == N,
                j >= 0,
                a[( i ) as int] >= i as i32, // Changed by AI, ensuring a[i] is greater than or equal to i conditioned on loop index
                a[( i ) as int] <= N, // Added by AI using N as the upper bound for a[i]
                sum + a[( i ) as int] >= sum, // Added by AI, ensuring no arithmetic overflow
        {
            a.set(i, a[i] - 1);
            j = j + 1;
        }
        sum = sum + a[i];
        i = i + 1;
    }
    sum
}

} // verus!


a[(i) as int] >= i as i32 && i < N as usize ==> a[(i) as int] >= i as i32


while (i < N as usize)
    invariant
        N <= 0x3FFF_FFFF,
        b.len() == N,
        forall|k: int| k <= #[trigger] b[k] <= k + 1,
        i <= N as usize,
        old(a).len() == N,
        sum <= 2 * N,
        sum >= N,
        a.len() == N, 
        i >= 0,
        i > 0 ==> a[(i - 1) as int] >= (i - 1) as i32,
        a[(i) as int] <= N, // Added by AI using N as the upper bound for a[i]
        sum + a[(i) as int] >= sum, // Added by AI, ensuring no arithmetic overflow
    {
        a.set(i, b[i] + 1);
        let mut j: usize = 0;
        while (j < i)
            invariant
                j <= i,
                a.len() == N,
                j >= 0,
                i > 0 ==> a[(i - 1) as int] >= (i - 1) as i32,
                a[(i) as int] <= N, // Added by AI using N as the upper bound for a[i]
                sum + a[(i) as int] >= sum, // Added by AI, ensuring no arithmetic overflow
            {
                a.set(i, a[i] - 1);
                j = j + 1;
            }
        sum = sum + a[i];
        i = i + 1;
    }

